   1               		.file	"eeprom.c"
   2               	__SP_L__ = 0x3d
   3               	__SREG__ = 0x3f
   4               	__tmp_reg__ = 0
   5               	__zero_reg__ = 1
   6               		.text
   7               	.Ltext0:
   8               		.cfi_sections	.debug_frame
   9               	.global	EEPROMWriteByte
  11               	EEPROMWriteByte:
  12               	.LFB2:
  13               		.file 1 "eeprom.c"
   1:eeprom.c      **** /******************************************************************************
   2:eeprom.c      **** Created 26 Nov 2012 by Mike Hord at SparkFun Electronics.
   3:eeprom.c      **** Wake-on-Shake hardware and firmware are released under the Creative Commons 
   4:eeprom.c      **** Share Alike v3.0 license:
   5:eeprom.c      **** 	http://creativecommons.org/licenses/by-sa/3.0/
   6:eeprom.c      **** Feel free to use, distribute, and sell variants of Wake-on-Shake. All we ask 
   7:eeprom.c      **** is that you include attribution of 'Based on Wake-on-Shake by SparkFun'.
   8:eeprom.c      **** 
   9:eeprom.c      **** eeprom.cpp
  10:eeprom.c      **** Function implementations for handling the EEPROM. Rolled my own because it
  11:eeprom.c      **** didn't seem that the built-in functions were working; in retrospect that's
  12:eeprom.c      **** probably not the case, but done is done.
  13:eeprom.c      **** ******************************************************************************/
  14:eeprom.c      **** 
  15:eeprom.c      **** #include <avr/io.h>
  16:eeprom.c      **** #include "eeprom.h"
  17:eeprom.c      **** #include <avr/interrupt.h>
  18:eeprom.c      **** #include "serial.h"
  19:eeprom.c      **** #include "wake-on-shake.h"
  20:eeprom.c      **** 
  21:eeprom.c      **** extern uint16_t				t1Offset;  // See Wake-on-Shake.cpp
  22:eeprom.c      **** 
  23:eeprom.c      **** // Write a 16-bit value to EEPROM. Data is written big-endian. Note that
  24:eeprom.c      **** //   blocking while waiting for prior writes to EEPROM to complete is
  25:eeprom.c      **** //   handled in the byte read/write calls, which are called from here,
  26:eeprom.c      **** //   so blocking is NOT needed in this function.
  27:eeprom.c      **** void EEPROMWriteWord(uint8_t addr, uint16_t data)
  28:eeprom.c      **** {
  29:eeprom.c      **** 	uint16_t dataTemp = data>>8;				// Isolate the high byte.
  30:eeprom.c      **** 	EEPROMWriteByte(addr, (uint8_t)dataTemp);   // Write high byte to EEPROM.
  31:eeprom.c      **** 	EEPROMWriteByte(addr+1, (uint8_t)data);		// Write low byte to EEPROM.
  32:eeprom.c      **** }
  33:eeprom.c      **** 
  34:eeprom.c      **** // Read a 16-bit value from EEPROM. Data is written big-endian. Note that
  35:eeprom.c      **** //   blocking while waiting for prior writes to EEPROM to complete is
  36:eeprom.c      **** //   handled in the byte read/write calls, which are called from here,
  37:eeprom.c      **** //   so blocking is NOT needed in this function.
  38:eeprom.c      **** uint16_t EEPROMReadWord(uint8_t addr)
  39:eeprom.c      **** {
  40:eeprom.c      **** 	uint16_t readResult;
  41:eeprom.c      **** 	readResult = (uint16_t)EEPROMReadByte(addr);	// Retrieve the high byte.
  42:eeprom.c      **** 	readResult = readResult<<8;						// Left shift the hight byte.
  43:eeprom.c      **** 	readResult |= (uint16_t)EEPROMReadByte(addr+1); // OR-in the low byte.
  44:eeprom.c      **** 	return readResult;
  45:eeprom.c      **** }
  46:eeprom.c      **** 
  47:eeprom.c      **** // 8-bit write to EEPROM. Since EEPROM writes can take rather a long time, we
  48:eeprom.c      **** //   want to disable interrupts to avoid any unforeseen register mashing.
  49:eeprom.c      **** void EEPROMWriteByte(uint8_t addr, uint8_t data)
  50:eeprom.c      **** {
  14               		.loc 1 50 0
  15               		.cfi_startproc
  16               	.LVL0:
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
  51:eeprom.c      **** 	cli();							// Disable interrupts.
  21               		.loc 1 51 0
  22               	/* #APP */
  23               	 ;  51 "eeprom.c" 1
  24 0000 F894      		cli
  25               	 ;  0 "" 2
  26               	/* #NOAPP */
  27               	.L3:
  52:eeprom.c      **** 	while (EECR & (1<<EEPE));		// Wait for in-progress EEPROM writes to
  28               		.loc 1 52 0 discriminator 1
  29 0002 E199      		sbic 0x1c,1
  30 0004 00C0      		rjmp .L3
  53:eeprom.c      **** 									//  complete before using their resources.
  54:eeprom.c      **** 	EECR = (0<<EEPM1) | (0<<EEPM0); // See datasheet for details on the hows
  31               		.loc 1 54 0
  32 0006 1CBA      		out 0x1c,__zero_reg__
  55:eeprom.c      **** 	EEAR = addr;					//  and whys of this write process.
  33               		.loc 1 55 0
  34 0008 8EBB      		out 0x1e,r24
  56:eeprom.c      **** 	EEDR = data;
  35               		.loc 1 56 0
  36 000a 6DBB      		out 0x1d,r22
  57:eeprom.c      **** 	EECR |= (1<<EEMPE);
  37               		.loc 1 57 0
  38 000c E29A      		sbi 0x1c,2
  58:eeprom.c      **** 	EECR |= (1<<EEPE);
  39               		.loc 1 58 0
  40 000e E19A      		sbi 0x1c,1
  59:eeprom.c      **** 	sei();							// Re-enable interrupts once the write is
  41               		.loc 1 59 0
  42               	/* #APP */
  43               	 ;  59 "eeprom.c" 1
  44 0010 7894      		sei
  45               	 ;  0 "" 2
  46               	/* #NOAPP */
  47 0012 0895      		ret
  48               		.cfi_endproc
  49               	.LFE2:
  51               	.global	EEPROMWriteWord
  53               	EEPROMWriteWord:
  54               	.LFB0:
  28:eeprom.c      **** {
  55               		.loc 1 28 0
  56               		.cfi_startproc
  57               	.LVL1:
  58 0014 CF93      		push r28
  59               	.LCFI0:
  60               		.cfi_def_cfa_offset 3
  61               		.cfi_offset 28, -2
  62 0016 DF93      		push r29
  63               	.LCFI1:
  64               		.cfi_def_cfa_offset 4
  65               		.cfi_offset 29, -3
  66               	/* prologue: function */
  67               	/* frame size = 0 */
  68               	/* stack size = 2 */
  69               	.L__stack_usage = 2
  70 0018 C82F      		mov r28,r24
  71 001a D62F      		mov r29,r22
  72 001c 672F      		mov r22,r23
  73               	.LVL2:
  30:eeprom.c      **** 	EEPROMWriteByte(addr, (uint8_t)dataTemp);   // Write high byte to EEPROM.
  74               		.loc 1 30 0
  75 001e 00D0      		rcall EEPROMWriteByte
  76               	.LVL3:
  31:eeprom.c      **** 	EEPROMWriteByte(addr+1, (uint8_t)data);		// Write low byte to EEPROM.
  77               		.loc 1 31 0
  78 0020 6D2F      		mov r22,r29
  79 0022 81E0      		ldi r24,lo8(1)
  80 0024 8C0F      		add r24,r28
  81               	/* epilogue start */
  32:eeprom.c      **** }
  82               		.loc 1 32 0
  83 0026 DF91      		pop r29
  84 0028 CF91      		pop r28
  85               	.LVL4:
  31:eeprom.c      **** 	EEPROMWriteByte(addr+1, (uint8_t)data);		// Write low byte to EEPROM.
  86               		.loc 1 31 0
  87 002a 00C0      		rjmp EEPROMWriteByte
  88               	.LVL5:
  89               		.cfi_endproc
  90               	.LFE0:
  92               	.global	EEPROMReadByte
  94               	EEPROMReadByte:
  95               	.LFB3:
  60:eeprom.c      **** 									//  underway- they can't hurt the process.
  61:eeprom.c      **** }
  62:eeprom.c      **** 
  63:eeprom.c      **** // 8-bit read from EEPROM. The read needs to be atomic, so we want to disable
  64:eeprom.c      **** //   interrupts before starting it up to keep registers intact.
  65:eeprom.c      **** uint8_t EEPROMReadByte(uint8_t addr)
  66:eeprom.c      **** {
  96               		.loc 1 66 0
  97               		.cfi_startproc
  98               	.LVL6:
  99               	/* prologue: function */
 100               	/* frame size = 0 */
 101               	/* stack size = 0 */
 102               	.L__stack_usage = 0
  67:eeprom.c      **** 	cli();						// Disable interrupts.
 103               		.loc 1 67 0
 104               	/* #APP */
 105               	 ;  67 "eeprom.c" 1
 106 002c F894      		cli
 107               	 ;  0 "" 2
 108               	/* #NOAPP */
 109               	.L8:
  68:eeprom.c      **** 	while (EECR & (1<<EEPE));	// Wait for any writes to finish, to avoid
 110               		.loc 1 68 0 discriminator 1
 111 002e E199      		sbic 0x1c,1
 112 0030 00C0      		rjmp .L8
  69:eeprom.c      **** 								//   a resource conflict.
  70:eeprom.c      **** 	EEAR = addr;				// See the datasheet for more details about
 113               		.loc 1 70 0
 114 0032 8EBB      		out 0x1e,r24
  71:eeprom.c      **** 	EECR += (1<<EERE);			//  this process.
 115               		.loc 1 71 0
 116 0034 8CB3      		in r24,0x1c
 117               	.LVL7:
 118 0036 8F5F      		subi r24,lo8(-(1))
 119 0038 8CBB      		out 0x1c,r24
 120               	.LVL8:
  72:eeprom.c      **** 	sei();						// Re-enable the interrupts.
 121               		.loc 1 72 0
 122               	/* #APP */
 123               	 ;  72 "eeprom.c" 1
 124 003a 7894      		sei
 125               	 ;  0 "" 2
  73:eeprom.c      **** 	return EEDR;				// Return the value at the address in question.
 126               		.loc 1 73 0
 127               	/* #NOAPP */
 128 003c 8DB3      		in r24,0x1d
  74:eeprom.c      **** }
 129               		.loc 1 74 0
 130 003e 0895      		ret
 131               		.cfi_endproc
 132               	.LFE3:
 134               	.global	EEPROMReadWord
 136               	EEPROMReadWord:
 137               	.LFB1:
  39:eeprom.c      **** {
 138               		.loc 1 39 0
 139               		.cfi_startproc
 140               	.LVL9:
 141 0040 1F93      		push r17
 142               	.LCFI2:
 143               		.cfi_def_cfa_offset 3
 144               		.cfi_offset 17, -2
 145 0042 CF93      		push r28
 146               	.LCFI3:
 147               		.cfi_def_cfa_offset 4
 148               		.cfi_offset 28, -3
 149 0044 DF93      		push r29
 150               	.LCFI4:
 151               		.cfi_def_cfa_offset 5
 152               		.cfi_offset 29, -4
 153               	/* prologue: function */
 154               	/* frame size = 0 */
 155               	/* stack size = 3 */
 156               	.L__stack_usage = 3
 157 0046 182F      		mov r17,r24
  41:eeprom.c      **** 	readResult = (uint16_t)EEPROMReadByte(addr);	// Retrieve the high byte.
 158               		.loc 1 41 0
 159 0048 00D0      		rcall EEPROMReadByte
 160               	.LVL10:
 161 004a C82F      		mov r28,r24
 162 004c D0E0      		ldi r29,0
 163               	.LVL11:
  42:eeprom.c      **** 	readResult = readResult<<8;						// Left shift the hight byte.
 164               		.loc 1 42 0
 165 004e DC2F      		mov r29,r28
 166 0050 CC27      		clr r28
 167               	.LVL12:
  43:eeprom.c      **** 	readResult |= (uint16_t)EEPROMReadByte(addr+1); // OR-in the low byte.
 168               		.loc 1 43 0
 169 0052 81E0      		ldi r24,lo8(1)
 170 0054 810F      		add r24,r17
 171 0056 00D0      		rcall EEPROMReadByte
 172               	.LVL13:
  45:eeprom.c      **** }
 173               		.loc 1 45 0
 174 0058 9E01      		movw r18,r28
 175 005a 282B      		or r18,r24
 176 005c C901      		movw r24,r18
 177               	.LVL14:
 178               	/* epilogue start */
 179 005e DF91      		pop r29
 180 0060 CF91      		pop r28
 181 0062 1F91      		pop r17
 182               	.LVL15:
 183 0064 0895      		ret
 184               		.cfi_endproc
 185               	.LFE1:
 187               	.Letext0:
 188               		.file 2 "/usr/local/CrossPack-AVR-20131216/avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:00000000 eeprom.c
/var/folders/jy/pkqnkk1s5x97h68j2fkh30vh0000gq/T//ccvHticN.s:2      *ABS*:0000003d __SP_L__
/var/folders/jy/pkqnkk1s5x97h68j2fkh30vh0000gq/T//ccvHticN.s:3      *ABS*:0000003f __SREG__
/var/folders/jy/pkqnkk1s5x97h68j2fkh30vh0000gq/T//ccvHticN.s:4      *ABS*:00000000 __tmp_reg__
/var/folders/jy/pkqnkk1s5x97h68j2fkh30vh0000gq/T//ccvHticN.s:5      *ABS*:00000001 __zero_reg__
/var/folders/jy/pkqnkk1s5x97h68j2fkh30vh0000gq/T//ccvHticN.s:11     .text:00000000 EEPROMWriteByte
/var/folders/jy/pkqnkk1s5x97h68j2fkh30vh0000gq/T//ccvHticN.s:53     .text:00000014 EEPROMWriteWord
/var/folders/jy/pkqnkk1s5x97h68j2fkh30vh0000gq/T//ccvHticN.s:94     .text:0000002c EEPROMReadByte
/var/folders/jy/pkqnkk1s5x97h68j2fkh30vh0000gq/T//ccvHticN.s:136    .text:00000040 EEPROMReadWord

NO UNDEFINED SYMBOLS
