
wake-on-shake.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000067c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  0000067c  00000710  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  0080006c  0080006c  0000071c  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0000071c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000730  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00000770  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001331  00000000  00000000  000008f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b47  00000000  00000000  00001c29  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001629  00000000  00000000  00002770  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b4  00000000  00000000  00003d9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000051b  00000000  00000000  00004050  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000066d  00000000  00000000  0000456b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00004bd8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	01 c2       	rjmp	.+1026   	; 0x406 <__vector_1>
   4:	15 c2       	rjmp	.+1066   	; 0x430 <__vector_2>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	f7 c1       	rjmp	.+1006   	; 0x3fa <__vector_5>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	33 c2       	rjmp	.+1126   	; 0x476 <__vector_7>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>
  26:	1a c0       	rjmp	.+52     	; 0x5c <__bad_interrupt>
  28:	19 c0       	rjmp	.+50     	; 0x5c <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ec e7       	ldi	r30, 0x7C	; 124
  3a:	f6 e0       	ldi	r31, 0x06	; 6
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	ac 36       	cpi	r26, 0x6C	; 108
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_L__+0x1>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	ac e6       	ldi	r26, 0x6C	; 108
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a3 37       	cpi	r26, 0x73	; 115
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	9d d2       	rcall	.+1338   	; 0x594 <main>
  5a:	0e c3       	rjmp	.+1564   	; 0x678 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <EEPROMRetrieve>:
}

// Utility function which pulls the various operational paramters out of EEPROM,
//   puts them into SRAM, and prints them over the serial line.
void EEPROMRetrieve(void)
{
  5e:	cf 93       	push	r28
  60:	df 93       	push	r29
	uint16_t threshold = EEPROMReadWord((uint8_t)ATHRESH);		// Activity threshold. See
  62:	80 e0       	ldi	r24, 0x00	; 0
  64:	7a d2       	rcall	.+1268   	; 0x55a <EEPROMReadWord>
  66:	d8 2f       	mov	r29, r24
  68:	c9 2f       	mov	r28, r25
														//   ADXL362 datasheet for info.
	t1Offset =  EEPROMReadWord((uint8_t)WAKE_OFFS);     // (65535 - t1Offset)ms elapse
  6a:	82 e0       	ldi	r24, 0x02	; 2
  6c:	76 d2       	rcall	.+1260   	; 0x55a <EEPROMReadWord>
  6e:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <t1Offset+0x1>
  72:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <t1Offset>
														//   between Timer1 interrupts.
	serialWriteInt(threshold);							// Print threshold in human format.
  76:	8d 2f       	mov	r24, r29
  78:	9c 2f       	mov	r25, r28
  7a:	8c d1       	rcall	.+792    	; 0x394 <serialWriteInt>
	serialWriteInt(65535 - t1Offset);					// Print the delay before sleep
  7c:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <t1Offset>
  80:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <t1Offset+0x1>
  84:	80 95       	com	r24
  86:	90 95       	com	r25
														//   in human format.
}
  88:	df 91       	pop	r29
  8a:	cf 91       	pop	r28
	serialWriteInt(65535 - t1Offset);					// Print the delay before sleep
  8c:	83 c1       	rjmp	.+774    	; 0x394 <serialWriteInt>

0000008e <EEPROMConfig>:
//   change these to more manageable values the first time the board powers up, or the
//   sleep interrupt will happen WAY too fast and the motion threshold will be WAY too
//   high for practicality.
void EEPROMConfig(void)
{
	t1Offset  = 60535;		// Corresponds to ~5s delay before going to sleep
  8e:	87 e7       	ldi	r24, 0x77	; 119
  90:	9c ee       	ldi	r25, 0xEC	; 236
  92:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <t1Offset+0x1>
  96:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <t1Offset>
	// Now let's store these, along with the "key" that let's us know we've done this.
	EEPROMWriteWord((uint8_t)ATHRESH, (uint16_t) 150);
  9a:	66 e9       	ldi	r22, 0x96	; 150
  9c:	70 e0       	ldi	r23, 0x00	; 0
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	46 d2       	rcall	.+1164   	; 0x52e <EEPROMWriteWord>
	EEPROMWriteWord((uint8_t)WAKE_OFFS, (uint16_t)t1Offset);
  a2:	60 91 71 00 	lds	r22, 0x0071	; 0x800071 <t1Offset>
  a6:	70 91 72 00 	lds	r23, 0x0072	; 0x800072 <t1Offset+0x1>
  aa:	82 e0       	ldi	r24, 0x02	; 2
  ac:	40 d2       	rcall	.+1152   	; 0x52e <EEPROMWriteWord>
	EEPROMWriteWord((uint8_t)ITHRESH, (uint16_t)50);
  ae:	62 e3       	ldi	r22, 0x32	; 50
  b0:	70 e0       	ldi	r23, 0x00	; 0
  b2:	84 e0       	ldi	r24, 0x04	; 4
  b4:	3c d2       	rcall	.+1144   	; 0x52e <EEPROMWriteWord>
	EEPROMWriteWord((uint8_t)ITIME, (uint16_t)15);
  b6:	6f e0       	ldi	r22, 0x0F	; 15
  b8:	70 e0       	ldi	r23, 0x00	; 0
  ba:	86 e0       	ldi	r24, 0x06	; 6
  bc:	38 d2       	rcall	.+1136   	; 0x52e <EEPROMWriteWord>
	EEPROMWriteByte((uint8_t)KEY_ADDR, (uint8_t)KEY);
  be:	6b e7       	ldi	r22, 0x7B	; 123
  c0:	8f e7       	ldi	r24, 0x7F	; 127
  c2:	2b c2       	rjmp	.+1110   	; 0x51a <EEPROMWriteByte>

000000c4 <printMenu>:
//   minimize string constant storage in memory by writing a single function
//   to handle frequently called string constant print calls, even if it
//   would be simpler (and tidier) to put it inline.
void printMenu(void)
{
	serialWrite(":-)");
  c4:	83 e6       	ldi	r24, 0x63	; 99
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	5a c1       	rjmp	.+692    	; 0x37e <serialWrite>

000000ca <abortInput>:
}

void abortInput(void)
{
	serialWrite(":-(");
  ca:	87 e6       	ldi	r24, 0x67	; 103
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	57 c1       	rjmp	.+686    	; 0x37e <serialWrite>

000000d0 <serialParse>:
	uint8_t				localData = serialRxData;
  d0:	20 91 6c 00 	lds	r18, 0x006C	; 0x80006c <__data_end>
	serialRxData = 0;					// Clear serialRxData
  d4:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <__data_end>
	if (((localData == '\n') | (localData == '\r')) & (mode == ' '));
  d8:	91 e0       	ldi	r25, 0x01	; 1
  da:	2a 30       	cpi	r18, 0x0A	; 10
  dc:	09 f0       	breq	.+2      	; 0xe0 <__stack+0x1>
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	2d 30       	cpi	r18, 0x0D	; 13
  e4:	09 f0       	breq	.+2      	; 0xe8 <__stack+0x9>
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	98 2b       	or	r25, r24
  ea:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
  ee:	31 e0       	ldi	r19, 0x01	; 1
  f0:	80 32       	cpi	r24, 0x20	; 32
  f2:	09 f0       	breq	.+2      	; 0xf6 <__stack+0x17>
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	99 23       	and	r25, r25
  f8:	11 f0       	breq	.+4      	; 0xfe <__stack+0x1f>
  fa:	31 11       	cpse	r19, r1
  fc:	36 c1       	rjmp	.+620    	; 0x36a <__stack+0x28b>
	else if (((localData == '\n') | (localData == '\r')) & (mode != ' '))
  fe:	80 32       	cpi	r24, 0x20	; 32
 100:	09 f4       	brne	.+2      	; 0x104 <__stack+0x25>
 102:	55 c0       	rjmp	.+170    	; 0x1ae <__stack+0xcf>
 104:	99 23       	and	r25, r25
 106:	09 f4       	brne	.+2      	; 0x10a <__stack+0x2b>
 108:	52 c0       	rjmp	.+164    	; 0x1ae <__stack+0xcf>
		switch(mode)
 10a:	85 36       	cpi	r24, 0x65	; 101
 10c:	09 f4       	brne	.+2      	; 0x110 <__stack+0x31>
 10e:	45 c0       	rjmp	.+138    	; 0x19a <__stack+0xbb>
 110:	78 f4       	brcc	.+30     	; 0x130 <__stack+0x51>
 112:	82 36       	cpi	r24, 0x62	; 98
 114:	b9 f1       	breq	.+110    	; 0x184 <__stack+0xa5>
 116:	84 36       	cpi	r24, 0x64	; 100
 118:	f1 f0       	breq	.+60     	; 0x156 <__stack+0x77>
 11a:	85 34       	cpi	r24, 0x45	; 69
 11c:	09 f4       	brne	.+2      	; 0x120 <__stack+0x41>
 11e:	43 c0       	rjmp	.+134    	; 0x1a6 <__stack+0xc7>
		inputBufferValue = 0;		// Clear the input buffer for next data stream.
 120:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <inputBufferValue.1532+0x1>
 124:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <inputBufferValue.1532>
		mode = ' ';					// Reset the mode for next data stream.
 128:	80 e2       	ldi	r24, 0x20	; 32
 12a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
		printMenu();				// Just an indicator of success.
 12e:	ca cf       	rjmp	.-108    	; 0xc4 <printMenu>
		switch(mode)
 130:	84 37       	cpi	r24, 0x74	; 116
 132:	51 f0       	breq	.+20     	; 0x148 <__stack+0x69>
 134:	87 37       	cpi	r24, 0x77	; 119
 136:	59 f1       	breq	.+86     	; 0x18e <__stack+0xaf>
 138:	82 37       	cpi	r24, 0x72	; 114
 13a:	91 f7       	brne	.-28     	; 0x120 <__stack+0x41>
			serialWriteInt((uint16_t)ADXLReadByte((uint8_t)inputBufferValue));
 13c:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <inputBufferValue.1532>
 140:	a8 d1       	rcall	.+848    	; 0x492 <ADXLReadByte>
			serialWriteInt((uint16_t)EEPROMReadByte((uint8_t)inputBufferValue));
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	27 d1       	rcall	.+590    	; 0x394 <serialWriteInt>
			break;
 146:	ec cf       	rjmp	.-40     	; 0x120 <__stack+0x41>
			EEPROMWriteWord((uint8_t)ATHRESH, inputBufferValue);
 148:	60 91 6f 00 	lds	r22, 0x006F	; 0x80006f <inputBufferValue.1532>
 14c:	70 91 70 00 	lds	r23, 0x0070	; 0x800070 <inputBufferValue.1532+0x1>
 150:	80 e0       	ldi	r24, 0x00	; 0
			EEPROMWriteWord((uint8_t)WAKE_OFFS, t1Offset);
 152:	ed d1       	rcall	.+986    	; 0x52e <EEPROMWriteWord>
			break;
 154:	e5 cf       	rjmp	.-54     	; 0x120 <__stack+0x41>
			t1Offset = 65535 - inputBufferValue;
 156:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <inputBufferValue.1532>
 15a:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <inputBufferValue.1532+0x1>
 15e:	80 95       	com	r24
 160:	90 95       	com	r25
			if (t1Offset > 63535) t1Offset = 63535;
 162:	80 33       	cpi	r24, 0x30	; 48
 164:	28 ef       	ldi	r18, 0xF8	; 248
 166:	92 07       	cpc	r25, r18
 168:	50 f4       	brcc	.+20     	; 0x17e <__stack+0x9f>
 16a:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <t1Offset+0x1>
 16e:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <t1Offset>
			EEPROMWriteWord((uint8_t)WAKE_OFFS, t1Offset);
 172:	60 91 71 00 	lds	r22, 0x0071	; 0x800071 <t1Offset>
 176:	70 91 72 00 	lds	r23, 0x0072	; 0x800072 <t1Offset+0x1>
 17a:	82 e0       	ldi	r24, 0x02	; 2
 17c:	ea cf       	rjmp	.-44     	; 0x152 <__stack+0x73>
			if (t1Offset > 63535) t1Offset = 63535;
 17e:	8f e2       	ldi	r24, 0x2F	; 47
 180:	98 ef       	ldi	r25, 0xF8	; 248
 182:	f3 cf       	rjmp	.-26     	; 0x16a <__stack+0x8b>
			serialDataBuffer = (uint8_t)inputBufferValue;
 184:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <inputBufferValue.1532>
 188:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <serialDataBuffer.1534>
			break;
 18c:	c9 cf       	rjmp	.-110    	; 0x120 <__stack+0x41>
			ADXLWriteByte((uint8_t)inputBufferValue, serialDataBuffer);
 18e:	60 91 6e 00 	lds	r22, 0x006E	; 0x80006e <serialDataBuffer.1534>
 192:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <inputBufferValue.1532>
 196:	8a d1       	rcall	.+788    	; 0x4ac <ADXLWriteByte>
			break;
 198:	c3 cf       	rjmp	.-122    	; 0x120 <__stack+0x41>
			EEPROMWriteByte((uint8_t)inputBufferValue, serialDataBuffer);
 19a:	60 91 6e 00 	lds	r22, 0x006E	; 0x80006e <serialDataBuffer.1534>
 19e:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <inputBufferValue.1532>
 1a2:	bb d1       	rcall	.+886    	; 0x51a <EEPROMWriteByte>
			break;
 1a4:	bd cf       	rjmp	.-134    	; 0x120 <__stack+0x41>
			serialWriteInt((uint16_t)EEPROMReadByte((uint8_t)inputBufferValue));
 1a6:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <inputBufferValue.1532>
 1aa:	cd d1       	rcall	.+922    	; 0x546 <EEPROMReadByte>
 1ac:	ca cf       	rjmp	.-108    	; 0x142 <__stack+0x63>
			(localData == 'p') |	// Read pin level (pins on header only)
 1ae:	52 2f       	mov	r21, r18
 1b0:	5b 7f       	andi	r21, 0xFB	; 251
			(localData == 'z') |	// Force sleep in ~35ms
 1b2:	91 e0       	ldi	r25, 0x01	; 1
 1b4:	2a 37       	cpi	r18, 0x7A	; 122
 1b6:	09 f0       	breq	.+2      	; 0x1ba <__stack+0xdb>
 1b8:	90 e0       	ldi	r25, 0x00	; 0
			(localData == 'w') |	// Write buffered byte to ADXL362 register
 1ba:	41 e0       	ldi	r20, 0x01	; 1
 1bc:	27 37       	cpi	r18, 0x77	; 119
 1be:	09 f0       	breq	.+2      	; 0x1c2 <__stack+0xe3>
 1c0:	40 e0       	ldi	r20, 0x00	; 0
	else if ((mode == ' ')&(
 1c2:	94 2b       	or	r25, r20
			(localData == 'E') |	// Read byte from EEPROM address
 1c4:	41 e0       	ldi	r20, 0x01	; 1
 1c6:	25 34       	cpi	r18, 0x45	; 69
 1c8:	09 f0       	breq	.+2      	; 0x1cc <__stack+0xed>
 1ca:	40 e0       	ldi	r20, 0x00	; 0
	else if ((mode == ' ')&(
 1cc:	94 2b       	or	r25, r20
			(localData == 't') |	// Change the threshold setting
 1ce:	61 e0       	ldi	r22, 0x01	; 1
 1d0:	4c e9       	ldi	r20, 0x9C	; 156
 1d2:	42 0f       	add	r20, r18
 1d4:	42 30       	cpi	r20, 0x02	; 2
 1d6:	08 f0       	brcs	.+2      	; 0x1da <__stack+0xfb>
 1d8:	60 e0       	ldi	r22, 0x00	; 0
	else if ((mode == ' ')&(
 1da:	96 2b       	or	r25, r22
			(localData == 'b') |	// Buffer a byte for EEPROM or ADXL write
 1dc:	61 e0       	ldi	r22, 0x01	; 1
 1de:	42 2f       	mov	r20, r18
 1e0:	4f 7e       	andi	r20, 0xEF	; 239
 1e2:	42 36       	cpi	r20, 0x62	; 98
 1e4:	09 f0       	breq	.+2      	; 0x1e8 <__stack+0x109>
 1e6:	60 e0       	ldi	r22, 0x00	; 0
	else if ((mode == ' ')&(
 1e8:	96 2b       	or	r25, r22
			(localData == 'p') |	// Read pin level (pins on header only)
 1ea:	41 e0       	ldi	r20, 0x01	; 1
 1ec:	50 37       	cpi	r21, 0x70	; 112
 1ee:	09 f0       	breq	.+2      	; 0x1f2 <__stack+0x113>
 1f0:	40 e0       	ldi	r20, 0x00	; 0
	else if ((mode == ' ')&(
 1f2:	94 2b       	or	r25, r20
			(localData == 'H') |	// Set pin high (pins on header only)
 1f4:	41 e0       	ldi	r20, 0x01	; 1
 1f6:	58 34       	cpi	r21, 0x48	; 72
 1f8:	09 f0       	breq	.+2      	; 0x1fc <__stack+0x11d>
 1fa:	40 e0       	ldi	r20, 0x00	; 0
	else if ((mode == ' ')&(
 1fc:	94 2b       	or	r25, r20
 1fe:	79 f0       	breq	.+30     	; 0x21e <__stack+0x13f>
 200:	33 23       	and	r19, r19
 202:	69 f0       	breq	.+26     	; 0x21e <__stack+0x13f>
		mode = localData;
 204:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__data_start>
	    if (mode == 'z')
 208:	2a 37       	cpi	r18, 0x7A	; 122
 20a:	09 f0       	breq	.+2      	; 0x20e <__stack+0x12f>
 20c:	ae c0       	rjmp	.+348    	; 0x36a <__stack+0x28b>
			TCNT1 = 65500;	// Set TCNT1 to *almost* overflowing. Sleep will
 20e:	8c ed       	ldi	r24, 0xDC	; 220
 210:	9f ef       	ldi	r25, 0xFF	; 255
 212:	9d bd       	out	0x2d, r25	; 45
 214:	8c bd       	out	0x2c, r24	; 44
			mode = ' ';		// Clear mode for later.
 216:	80 e2       	ldi	r24, 0x20	; 32
 218:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 21c:	08 95       	ret
				(mode == 'p')|\
 21e:	48 2f       	mov	r20, r24
 220:	4b 7f       	andi	r20, 0xFB	; 251
				(mode == 'w')|\
 222:	91 e0       	ldi	r25, 0x01	; 1
 224:	87 37       	cpi	r24, 0x77	; 119
 226:	09 f0       	breq	.+2      	; 0x22a <__stack+0x14b>
 228:	90 e0       	ldi	r25, 0x00	; 0
				(mode == 'E')|\
 22a:	31 e0       	ldi	r19, 0x01	; 1
 22c:	85 34       	cpi	r24, 0x45	; 69
 22e:	09 f0       	breq	.+2      	; 0x232 <__stack+0x153>
 230:	30 e0       	ldi	r19, 0x00	; 0
	else if (	(mode == 't')|\
 232:	93 2b       	or	r25, r19
 234:	51 e0       	ldi	r21, 0x01	; 1
 236:	3c e9       	ldi	r19, 0x9C	; 156
 238:	38 0f       	add	r19, r24
 23a:	32 30       	cpi	r19, 0x02	; 2
 23c:	08 f0       	brcs	.+2      	; 0x240 <__stack+0x161>
 23e:	50 e0       	ldi	r21, 0x00	; 0
 240:	95 2b       	or	r25, r21
				(mode == 'p')|\
 242:	31 e0       	ldi	r19, 0x01	; 1
 244:	40 37       	cpi	r20, 0x70	; 112
 246:	09 f0       	breq	.+2      	; 0x24a <__stack+0x16b>
 248:	30 e0       	ldi	r19, 0x00	; 0
	else if (	(mode == 't')|\
 24a:	93 2b       	or	r25, r19
				(mode == 'H')|\
 24c:	31 e0       	ldi	r19, 0x01	; 1
 24e:	48 34       	cpi	r20, 0x48	; 72
 250:	09 f0       	breq	.+2      	; 0x254 <__stack+0x175>
 252:	30 e0       	ldi	r19, 0x00	; 0
	else if (	(mode == 't')|\
 254:	93 2b       	or	r25, r19
 256:	29 f4       	brne	.+10     	; 0x262 <__stack+0x183>
				(mode == 'b'))
 258:	98 2f       	mov	r25, r24
 25a:	9f 7e       	andi	r25, 0xEF	; 239
 25c:	92 36       	cpi	r25, 0x62	; 98
 25e:	09 f0       	breq	.+2      	; 0x262 <__stack+0x183>
 260:	80 c0       	rjmp	.+256    	; 0x362 <__stack+0x283>
		if (mode == 'p')
 262:	80 37       	cpi	r24, 0x70	; 112
 264:	59 f5       	brne	.+86     	; 0x2bc <__stack+0x1dd>
			mode = ' ';   // clear mode. We'll do this regardless of outcome.
 266:	80 e2       	ldi	r24, 0x20	; 32
 268:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
			switch(localData)
 26c:	22 33       	cpi	r18, 0x32	; 50
 26e:	d1 f0       	breq	.+52     	; 0x2a4 <__stack+0x1c5>
 270:	28 f4       	brcc	.+10     	; 0x27c <__stack+0x19d>
 272:	20 33       	cpi	r18, 0x30	; 48
 274:	69 f0       	breq	.+26     	; 0x290 <__stack+0x1b1>
 276:	21 33       	cpi	r18, 0x31	; 49
 278:	81 f0       	breq	.+32     	; 0x29a <__stack+0x1bb>
			abortInput();
 27a:	27 cf       	rjmp	.-434    	; 0xca <abortInput>
			switch(localData)
 27c:	23 33       	cpi	r18, 0x33	; 51
 27e:	c1 f0       	breq	.+48     	; 0x2b0 <__stack+0x1d1>
 280:	26 33       	cpi	r18, 0x36	; 54
 282:	d9 f7       	brne	.-10     	; 0x27a <__stack+0x19b>
				DDRD &= ~(1<<PD6);
 284:	8e 98       	cbi	0x11, 6	; 17
				serialWriteChar('0'+((PIND & (1<<PD6))>>PD6));
 286:	80 b3       	in	r24, 0x10	; 16
 288:	86 fb       	bst	r24, 6
 28a:	88 27       	eor	r24, r24
 28c:	80 f9       	bld	r24, 0
 28e:	03 c0       	rjmp	.+6      	; 0x296 <__stack+0x1b7>
				DDRB &= ~(1<<PB0);							// make pin input
 290:	b8 98       	cbi	0x17, 0	; 23
				serialWriteChar('0'+((PINB & (1<<PB0))>>PB0));    // isolate bit and
 292:	86 b3       	in	r24, 0x16	; 22
 294:	81 70       	andi	r24, 0x01	; 1
				serialWriteChar('0'+((PINB & (1<<PB1))>>PB1));
 296:	80 5d       	subi	r24, 0xD0	; 208
 298:	69 c0       	rjmp	.+210    	; 0x36c <serialWriteChar>
				DDRB &= ~(1<<PB1);
 29a:	b9 98       	cbi	0x17, 1	; 23
				serialWriteChar('0'+((PINB & (1<<PB1))>>PB1));
 29c:	86 b3       	in	r24, 0x16	; 22
 29e:	86 95       	lsr	r24
 2a0:	81 70       	andi	r24, 0x01	; 1
 2a2:	f9 cf       	rjmp	.-14     	; 0x296 <__stack+0x1b7>
				DDRB &= ~(1<<PB2);
 2a4:	ba 98       	cbi	0x17, 2	; 23
				serialWriteChar('0'+((PINB & (1<<PB2))>>PB2));
 2a6:	86 b3       	in	r24, 0x16	; 22
 2a8:	82 fb       	bst	r24, 2
 2aa:	88 27       	eor	r24, r24
 2ac:	80 f9       	bld	r24, 0
 2ae:	f3 cf       	rjmp	.-26     	; 0x296 <__stack+0x1b7>
				DDRB &= ~(1<<PB3);
 2b0:	bb 98       	cbi	0x17, 3	; 23
				serialWriteChar('0'+((PINB & (1<<PB3))>>PB3));
 2b2:	86 b3       	in	r24, 0x16	; 22
 2b4:	83 fb       	bst	r24, 3
 2b6:	88 27       	eor	r24, r24
 2b8:	80 f9       	bld	r24, 0
 2ba:	ed cf       	rjmp	.-38     	; 0x296 <__stack+0x1b7>
		else if (mode == 'H')
 2bc:	88 34       	cpi	r24, 0x48	; 72
 2be:	e9 f4       	brne	.+58     	; 0x2fa <__stack+0x21b>
			mode = ' ';   // clear mode. We'll do this regardless of outcome.
 2c0:	80 e2       	ldi	r24, 0x20	; 32
 2c2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
			switch(localData)
 2c6:	22 33       	cpi	r18, 0x32	; 50
 2c8:	91 f0       	breq	.+36     	; 0x2ee <__stack+0x20f>
 2ca:	38 f4       	brcc	.+14     	; 0x2da <__stack+0x1fb>
 2cc:	20 33       	cpi	r18, 0x30	; 48
 2ce:	61 f0       	breq	.+24     	; 0x2e8 <__stack+0x209>
 2d0:	21 33       	cpi	r18, 0x31	; 49
 2d2:	99 f6       	brne	.-90     	; 0x27a <__stack+0x19b>
				DDRB |= (1<<PB1);
 2d4:	b9 9a       	sbi	0x17, 1	; 23
				PORTB |= (1<<PB1);
 2d6:	c1 9a       	sbi	0x18, 1	; 24
				break;
 2d8:	08 95       	ret
			switch(localData)
 2da:	23 33       	cpi	r18, 0x33	; 51
 2dc:	59 f0       	breq	.+22     	; 0x2f4 <__stack+0x215>
 2de:	26 33       	cpi	r18, 0x36	; 54
 2e0:	61 f6       	brne	.-104    	; 0x27a <__stack+0x19b>
				DDRD |= (1<<PD6);
 2e2:	8e 9a       	sbi	0x11, 6	; 17
				PORTD |= (1<<PD6);
 2e4:	96 9a       	sbi	0x12, 6	; 18
				break;
 2e6:	08 95       	ret
				DDRB |= (1<<PB0);	// make pin an output
 2e8:	b8 9a       	sbi	0x17, 0	; 23
				PORTB |= (1<<PB0);  // set pin high
 2ea:	c0 9a       	sbi	0x18, 0	; 24
				break;
 2ec:	08 95       	ret
				DDRB |= (1<<PB2);
 2ee:	ba 9a       	sbi	0x17, 2	; 23
				PORTB |= (1<<PB2);
 2f0:	c2 9a       	sbi	0x18, 2	; 24
				break;
 2f2:	08 95       	ret
				DDRB |= (1<<PB3);
 2f4:	bb 9a       	sbi	0x17, 3	; 23
				PORTB |= (1<<PB3);
 2f6:	c3 9a       	sbi	0x18, 3	; 24
				break;
 2f8:	08 95       	ret
		else if (mode == 'L')
 2fa:	8c 34       	cpi	r24, 0x4C	; 76
 2fc:	f9 f4       	brne	.+62     	; 0x33c <__stack+0x25d>
			mode = ' ';   // clear mode. We'll do this regardless of outcome.
 2fe:	80 e2       	ldi	r24, 0x20	; 32
 300:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
			switch(localData)
 304:	22 33       	cpi	r18, 0x32	; 50
 306:	a1 f0       	breq	.+40     	; 0x330 <__stack+0x251>
 308:	40 f4       	brcc	.+16     	; 0x31a <__stack+0x23b>
 30a:	20 33       	cpi	r18, 0x30	; 48
 30c:	71 f0       	breq	.+28     	; 0x32a <__stack+0x24b>
 30e:	21 33       	cpi	r18, 0x31	; 49
 310:	09 f0       	breq	.+2      	; 0x314 <__stack+0x235>
 312:	b3 cf       	rjmp	.-154    	; 0x27a <__stack+0x19b>
				DDRB |= (1<<PB1);
 314:	b9 9a       	sbi	0x17, 1	; 23
				PORTB &= ~(1<<PB1);
 316:	c1 98       	cbi	0x18, 1	; 24
				break;
 318:	08 95       	ret
			switch(localData)
 31a:	23 33       	cpi	r18, 0x33	; 51
 31c:	61 f0       	breq	.+24     	; 0x336 <__stack+0x257>
 31e:	26 33       	cpi	r18, 0x36	; 54
 320:	09 f0       	breq	.+2      	; 0x324 <__stack+0x245>
 322:	ab cf       	rjmp	.-170    	; 0x27a <__stack+0x19b>
				DDRD |= (1<<PD6);
 324:	8e 9a       	sbi	0x11, 6	; 17
				PORTD &= ~(1<<PD6);
 326:	96 98       	cbi	0x12, 6	; 18
				break;
 328:	08 95       	ret
				DDRB |= (1<<PB0);	// make pin an output
 32a:	b8 9a       	sbi	0x17, 0	; 23
				PORTB &= ~(1<<PB0); // set pin low
 32c:	c0 98       	cbi	0x18, 0	; 24
				break;
 32e:	08 95       	ret
				DDRB |= (1<<PB2);
 330:	ba 9a       	sbi	0x17, 2	; 23
				PORTB &= ~(1<<PB2);
 332:	c2 98       	cbi	0x18, 2	; 24
				break;
 334:	08 95       	ret
				DDRB |= (1<<PB3);
 336:	bb 9a       	sbi	0x17, 3	; 23
				PORTB &= ~(1<<PB3);
 338:	c3 98       	cbi	0x18, 3	; 24
				break;
 33a:	08 95       	ret
		else if (('0' <= localData) & (localData <= '9'))
 33c:	80 ed       	ldi	r24, 0xD0	; 208
 33e:	82 0f       	add	r24, r18
 340:	8a 30       	cpi	r24, 0x0A	; 10
 342:	78 f4       	brcc	.+30     	; 0x362 <__stack+0x283>
			inputBufferValue *= 10;
 344:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <inputBufferValue.1532>
 348:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <inputBufferValue.1532+0x1>
 34c:	6a e0       	ldi	r22, 0x0A	; 10
 34e:	70 e0       	ldi	r23, 0x00	; 0
 350:	6e d1       	rcall	.+732    	; 0x62e <__mulhi3>
			inputBufferValue += (localData - '0');
 352:	82 0f       	add	r24, r18
 354:	91 1d       	adc	r25, r1
 356:	c0 97       	sbiw	r24, 0x30	; 48
 358:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <inputBufferValue.1532+0x1>
 35c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <inputBufferValue.1532>
 360:	08 95       	ret
			mode = ' ';
 362:	80 e2       	ldi	r24, 0x20	; 32
 364:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 368:	88 cf       	rjmp	.-240    	; 0x27a <__stack+0x19b>
}
 36a:	08 95       	ret

0000036c <serialWriteChar>:

// Print a single character out to the serial port. Blocks until write has
//   completed- is that a mistake?
void serialWriteChar(char data)
{
	UDR = data;
 36c:	8c b9       	out	0x0c, r24	; 12
	while ((UCSRA & (1<<TXC))==0){}   // Wait for the transmit to finish.
 36e:	5e 9b       	sbis	0x0b, 6	; 11
 370:	fe cf       	rjmp	.-4      	; 0x36e <serialWriteChar+0x2>
	UCSRA |= (1<<TXC);				// Clear the "transmit complete" flag.
 372:	5e 9a       	sbi	0x0b, 6	; 11
}
 374:	08 95       	ret

00000376 <serialNewline>:
	serialNewline();
}

void serialNewline(void)
{
	serialWriteChar((char)'\n');
 376:	8a e0       	ldi	r24, 0x0A	; 10
 378:	f9 df       	rcall	.-14     	; 0x36c <serialWriteChar>
	serialWriteChar((char)'\r');
 37a:	8d e0       	ldi	r24, 0x0D	; 13
 37c:	f7 cf       	rjmp	.-18     	; 0x36c <serialWriteChar>

0000037e <serialWrite>:
{
 37e:	cf 93       	push	r28
 380:	df 93       	push	r29
 382:	ec 01       	movw	r28, r24
		serialWriteChar((char)*data);   // Print the first character.
 384:	89 91       	ld	r24, Y+
 386:	f2 df       	rcall	.-28     	; 0x36c <serialWriteChar>
	} while (*data != '\0');			// Check for the end of the string.
 388:	88 81       	ld	r24, Y
 38a:	81 11       	cpse	r24, r1
 38c:	fb cf       	rjmp	.-10     	; 0x384 <serialWrite+0x6>
}
 38e:	df 91       	pop	r29
 390:	cf 91       	pop	r28
	serialNewline();
 392:	f1 cf       	rjmp	.-30     	; 0x376 <serialNewline>

00000394 <serialWriteInt>:
{	
 394:	0f 93       	push	r16
 396:	1f 93       	push	r17
 398:	cf 93       	push	r28
 39a:	df 93       	push	r29
 39c:	9c 01       	movw	r18, r24
	tenth = (data/10000);
 39e:	60 e1       	ldi	r22, 0x10	; 16
 3a0:	77 e2       	ldi	r23, 0x27	; 39
 3a2:	56 d1       	rcall	.+684    	; 0x650 <__udivmodhi4>
 3a4:	46 2f       	mov	r20, r22
 3a6:	97 2f       	mov	r25, r23
	data -= tenth*10000;
 3a8:	86 2f       	mov	r24, r22
 3aa:	60 e1       	ldi	r22, 0x10	; 16
 3ac:	77 e2       	ldi	r23, 0x27	; 39
 3ae:	3f d1       	rcall	.+638    	; 0x62e <__mulhi3>
 3b0:	b9 01       	movw	r22, r18
 3b2:	68 1b       	sub	r22, r24
 3b4:	79 0b       	sbc	r23, r25
 3b6:	cb 01       	movw	r24, r22
	thou = (uint8_t)(data/1000);
 3b8:	68 ee       	ldi	r22, 0xE8	; 232
 3ba:	73 e0       	ldi	r23, 0x03	; 3
 3bc:	49 d1       	rcall	.+658    	; 0x650 <__udivmodhi4>
 3be:	06 2f       	mov	r16, r22
	huns = (uint8_t)(data/100);
 3c0:	64 e6       	ldi	r22, 0x64	; 100
 3c2:	70 e0       	ldi	r23, 0x00	; 0
 3c4:	45 d1       	rcall	.+650    	; 0x650 <__udivmodhi4>
 3c6:	16 2f       	mov	r17, r22
	tens = (uint8_t)(data/10);
 3c8:	6a e0       	ldi	r22, 0x0A	; 10
 3ca:	70 e0       	ldi	r23, 0x00	; 0
 3cc:	41 d1       	rcall	.+642    	; 0x650 <__udivmodhi4>
 3ce:	d6 2f       	mov	r29, r22
 3d0:	c8 2f       	mov	r28, r24
	serialWriteChar(tenth);
 3d2:	80 e3       	ldi	r24, 0x30	; 48
 3d4:	84 0f       	add	r24, r20
 3d6:	ca df       	rcall	.-108    	; 0x36c <serialWriteChar>
	serialWriteChar(thou);
 3d8:	80 e3       	ldi	r24, 0x30	; 48
 3da:	80 0f       	add	r24, r16
 3dc:	c7 df       	rcall	.-114    	; 0x36c <serialWriteChar>
	serialWriteChar(huns);
 3de:	80 e3       	ldi	r24, 0x30	; 48
 3e0:	81 0f       	add	r24, r17
 3e2:	c4 df       	rcall	.-120    	; 0x36c <serialWriteChar>
	serialWriteChar(tens);
 3e4:	80 e3       	ldi	r24, 0x30	; 48
 3e6:	8d 0f       	add	r24, r29
 3e8:	c1 df       	rcall	.-126    	; 0x36c <serialWriteChar>
	serialWriteChar(ones);
 3ea:	80 e3       	ldi	r24, 0x30	; 48
 3ec:	8c 0f       	add	r24, r28
 3ee:	be df       	rcall	.-132    	; 0x36c <serialWriteChar>
}
 3f0:	df 91       	pop	r29
 3f2:	cf 91       	pop	r28
 3f4:	1f 91       	pop	r17
 3f6:	0f 91       	pop	r16
	serialNewline();
 3f8:	be cf       	rjmp	.-132    	; 0x376 <serialNewline>

000003fa <__vector_5>:
//   after it's been on for a certain time. Timer1 has been set up to tick
//   on clock/1024, which is ~1ms ticks; it's a 16-bit overflow, so left to
//   it's own devices, it will overflow every 65536 ticks, or after a bit
//   more than a minute. To shorten that time, we prime TCNT1
ISR(TIMER1_OVF_vect)
{
 3fa:	8f 93       	push	r24
	sleepyTime = TRUE;
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <sleepyTime>
}
 402:	8f 91       	pop	r24
 404:	18 95       	reti

00000406 <__vector_1>:
// INT0 ISR- This is one way the processor can wake from sleep. INT0 is tied
//   externally to the RX pin, so traffic on the serial receive line will
//   wake up the part when it is asleep. Note that the receive interrupt
//   can't wake the processor from sleep- don't try!
ISR(INT0_vect)
{
 406:	1f 92       	push	r1
 408:	1f b6       	in	r1, 0x3f	; 63
 40a:	1f 92       	push	r1
 40c:	11 24       	eor	r1, r1
 40e:	8f 93       	push	r24
 410:	9f 93       	push	r25
	TCNT1 = t1Offset;				// Reset our counter for on-time.
 412:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <t1Offset>
 416:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <t1Offset+0x1>
 41a:	9d bd       	out	0x2d, r25	; 45
 41c:	8c bd       	out	0x2c, r24	; 44
	sleepyTime = FALSE;				// Indicate wakefulness to main loop.
 41e:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <sleepyTime>
	GIMSK = (0<<INT0)|(0<<INT1);	// Disable INT pins while we're awake.
 422:	1b be       	out	0x3b, r1	; 59
									//  This is important b/c the INT pins
									//  cause an interrupt on LOW rather
									//  than on an edge, so the interrupt
									//  will continue to fire as long as
									//  the pin is low unless it is disabled.
}
 424:	9f 91       	pop	r25
 426:	8f 91       	pop	r24
 428:	1f 90       	pop	r1
 42a:	1f be       	out	0x3f, r1	; 63
 42c:	1f 90       	pop	r1
 42e:	18 95       	reti

00000430 <__vector_2>:
 430:	1f 92       	push	r1
 432:	0f 92       	push	r0
 434:	0f b6       	in	r0, 0x3f	; 63
 436:	0f 92       	push	r0
 438:	11 24       	eor	r1, r1
 43a:	2f 93       	push	r18
 43c:	3f 93       	push	r19
 43e:	4f 93       	push	r20
 440:	5f 93       	push	r21
 442:	6f 93       	push	r22
 444:	7f 93       	push	r23
 446:	8f 93       	push	r24
 448:	9f 93       	push	r25
 44a:	af 93       	push	r26
 44c:	bf 93       	push	r27
 44e:	ef 93       	push	r30
 450:	ff 93       	push	r31
 452:	d9 df       	rcall	.-78     	; 0x406 <__vector_1>
 454:	ff 91       	pop	r31
 456:	ef 91       	pop	r30
 458:	bf 91       	pop	r27
 45a:	af 91       	pop	r26
 45c:	9f 91       	pop	r25
 45e:	8f 91       	pop	r24
 460:	7f 91       	pop	r23
 462:	6f 91       	pop	r22
 464:	5f 91       	pop	r21
 466:	4f 91       	pop	r20
 468:	3f 91       	pop	r19
 46a:	2f 91       	pop	r18
 46c:	0f 90       	pop	r0
 46e:	0f be       	out	0x3f, r0	; 63
 470:	0f 90       	pop	r0
 472:	1f 90       	pop	r1
 474:	18 95       	reti

00000476 <__vector_7>:

// USART_RX ISR- gets called when the processor is awake and a complete
//   byte (including stop bit) has been received by the USART. This
//   interrupt CANNOT be used to wake the processor, so don't try it.
ISR(USART_RX_vect)
{
 476:	8f 93       	push	r24
 478:	9f 93       	push	r25
	TCNT1 = t1Offset;	// Reset the wakefulness timer, so the processor
 47a:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <t1Offset>
 47e:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <t1Offset+0x1>
 482:	9d bd       	out	0x2d, r25	; 45
 484:	8c bd       	out	0x2c, r24	; 44
						//   doesn't go to sleep while the user is
						//   interacting with it.
	serialRxData = UDR; // Pass the data back to the main loop for parsing.
 486:	8c b1       	in	r24, 0x0c	; 12
 488:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
}
 48c:	9f 91       	pop	r25
 48e:	8f 91       	pop	r24
 490:	18 95       	reti

00000492 <ADXLReadByte>:
}

// Simple functions to assert chip select and copy data in and out of the
//   ADXL362. 
uint8_t ADXLReadByte(uint8_t addr)
{
 492:	cf 93       	push	r28
 494:	c8 2f       	mov	r28, r24
	PORTB &= !(1<<PB4);	
 496:	88 b3       	in	r24, 0x18	; 24
 498:	18 ba       	out	0x18, r1	; 24
	spiXfer((uint8_t)XL362_REG_READ);
 49a:	8b e0       	ldi	r24, 0x0B	; 11
 49c:	71 d0       	rcall	.+226    	; 0x580 <spiXfer>
	spiXfer(addr);
 49e:	8c 2f       	mov	r24, r28
 4a0:	6f d0       	rcall	.+222    	; 0x580 <spiXfer>
	addr = spiXfer(addr);
 4a2:	8c 2f       	mov	r24, r28
 4a4:	6d d0       	rcall	.+218    	; 0x580 <spiXfer>
	PORTB |= (1<<PB4);
 4a6:	c4 9a       	sbi	0x18, 4	; 24
	return addr;
}
 4a8:	cf 91       	pop	r28
 4aa:	08 95       	ret

000004ac <ADXLWriteByte>:

void ADXLWriteByte(uint8_t addr, uint8_t data)
{
 4ac:	cf 93       	push	r28
 4ae:	df 93       	push	r29
 4b0:	d8 2f       	mov	r29, r24
 4b2:	c6 2f       	mov	r28, r22
	PORTB &= !(1<<PB4);
 4b4:	88 b3       	in	r24, 0x18	; 24
 4b6:	18 ba       	out	0x18, r1	; 24
	spiXfer((uint8_t)XL362_REG_WRITE);
 4b8:	8a e0       	ldi	r24, 0x0A	; 10
 4ba:	62 d0       	rcall	.+196    	; 0x580 <spiXfer>
	spiXfer(addr);
 4bc:	8d 2f       	mov	r24, r29
 4be:	60 d0       	rcall	.+192    	; 0x580 <spiXfer>
	spiXfer(data);
 4c0:	8c 2f       	mov	r24, r28
 4c2:	5e d0       	rcall	.+188    	; 0x580 <spiXfer>
	PORTB |= (1<<PB4);
 4c4:	c4 9a       	sbi	0x18, 4	; 24
 4c6:	df 91       	pop	r29
 4c8:	cf 91       	pop	r28
 4ca:	08 95       	ret

000004cc <ADXLConfig>:
	ADXLWriteByte((uint8_t)XL362_THRESH_ACTH, EEPROMReadByte(ATHRESH));
 4cc:	80 e0       	ldi	r24, 0x00	; 0
 4ce:	3b d0       	rcall	.+118    	; 0x546 <EEPROMReadByte>
 4d0:	68 2f       	mov	r22, r24
 4d2:	81 e2       	ldi	r24, 0x21	; 33
 4d4:	eb df       	rcall	.-42     	; 0x4ac <ADXLWriteByte>
	ADXLWriteByte((uint8_t)XL362_THRESH_ACTL, EEPROMReadByte(ATHRESH + 1));
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	36 d0       	rcall	.+108    	; 0x546 <EEPROMReadByte>
 4da:	68 2f       	mov	r22, r24
 4dc:	80 e2       	ldi	r24, 0x20	; 32
 4de:	e6 df       	rcall	.-52     	; 0x4ac <ADXLWriteByte>
	ADXLWriteByte((uint8_t)XL362_THRESH_INACTH, EEPROMReadByte(ITHRESH));
 4e0:	84 e0       	ldi	r24, 0x04	; 4
 4e2:	31 d0       	rcall	.+98     	; 0x546 <EEPROMReadByte>
 4e4:	68 2f       	mov	r22, r24
 4e6:	84 e2       	ldi	r24, 0x24	; 36
 4e8:	e1 df       	rcall	.-62     	; 0x4ac <ADXLWriteByte>
	ADXLWriteByte((uint8_t)XL362_THRESH_INACTL, EEPROMReadByte(ITHRESH+1));
 4ea:	85 e0       	ldi	r24, 0x05	; 5
 4ec:	2c d0       	rcall	.+88     	; 0x546 <EEPROMReadByte>
 4ee:	68 2f       	mov	r22, r24
 4f0:	83 e2       	ldi	r24, 0x23	; 35
 4f2:	dc df       	rcall	.-72     	; 0x4ac <ADXLWriteByte>
	ADXLWriteByte((uint8_t)XL362_TIME_INACTH, EEPROMReadByte(ITIME));
 4f4:	86 e0       	ldi	r24, 0x06	; 6
 4f6:	27 d0       	rcall	.+78     	; 0x546 <EEPROMReadByte>
 4f8:	68 2f       	mov	r22, r24
 4fa:	86 e2       	ldi	r24, 0x26	; 38
 4fc:	d7 df       	rcall	.-82     	; 0x4ac <ADXLWriteByte>
	ADXLWriteByte((uint8_t)XL362_TIME_INACTL, EEPROMReadByte(ITIME+1));	
 4fe:	87 e0       	ldi	r24, 0x07	; 7
 500:	22 d0       	rcall	.+68     	; 0x546 <EEPROMReadByte>
 502:	68 2f       	mov	r22, r24
 504:	85 e2       	ldi	r24, 0x25	; 37
 506:	d2 df       	rcall	.-92     	; 0x4ac <ADXLWriteByte>
	ADXLWriteByte((uint8_t)XL362_ACT_INACT_CTL, (uint8_t)0xFF);
 508:	6f ef       	ldi	r22, 0xFF	; 255
 50a:	87 e2       	ldi	r24, 0x27	; 39
 50c:	cf df       	rcall	.-98     	; 0x4ac <ADXLWriteByte>
	ADXLWriteByte((uint8_t)XL362_INTMAP1, (uint8_t)0b10010000);
 50e:	60 e9       	ldi	r22, 0x90	; 144
 510:	8a e2       	ldi	r24, 0x2A	; 42
 512:	cc df       	rcall	.-104    	; 0x4ac <ADXLWriteByte>
	ADXLWriteByte((uint8_t)XL362_POWER_CTL, (uint8_t)0x0A);
 514:	6a e0       	ldi	r22, 0x0A	; 10
 516:	8d e2       	ldi	r24, 0x2D	; 45
 518:	c9 cf       	rjmp	.-110    	; 0x4ac <ADXLWriteByte>

0000051a <EEPROMWriteByte>:

// 8-bit write to EEPROM. Since EEPROM writes can take rather a long time, we
//   want to disable interrupts to avoid any unforeseen register mashing.
void EEPROMWriteByte(uint8_t addr, uint8_t data)
{
	cli();							// Disable interrupts.
 51a:	f8 94       	cli
	while (EECR & (1<<EEPE));		// Wait for in-progress EEPROM writes to
 51c:	e1 99       	sbic	0x1c, 1	; 28
 51e:	fe cf       	rjmp	.-4      	; 0x51c <EEPROMWriteByte+0x2>
									//  complete before using their resources.
	EECR = (0<<EEPM1) | (0<<EEPM0); // See datasheet for details on the hows
 520:	1c ba       	out	0x1c, r1	; 28
	EEAR = addr;					//  and whys of this write process.
 522:	8e bb       	out	0x1e, r24	; 30
	EEDR = data;
 524:	6d bb       	out	0x1d, r22	; 29
	EECR |= (1<<EEMPE);
 526:	e2 9a       	sbi	0x1c, 2	; 28
	EECR |= (1<<EEPE);
 528:	e1 9a       	sbi	0x1c, 1	; 28
	sei();							// Re-enable interrupts once the write is
 52a:	78 94       	sei
									//  underway- they can't hurt the process.
}
 52c:	08 95       	ret

0000052e <EEPROMWriteWord>:
{
 52e:	cf 93       	push	r28
 530:	df 93       	push	r29
 532:	c8 2f       	mov	r28, r24
 534:	d6 2f       	mov	r29, r22
 536:	67 2f       	mov	r22, r23
	EEPROMWriteByte(addr, (uint8_t)dataTemp);   // Write high byte to EEPROM.
 538:	f0 df       	rcall	.-32     	; 0x51a <EEPROMWriteByte>
	EEPROMWriteByte(addr+1, (uint8_t)data);		// Write low byte to EEPROM.
 53a:	6d 2f       	mov	r22, r29
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	8c 0f       	add	r24, r28
}
 540:	df 91       	pop	r29
 542:	cf 91       	pop	r28
	EEPROMWriteByte(addr+1, (uint8_t)data);		// Write low byte to EEPROM.
 544:	ea cf       	rjmp	.-44     	; 0x51a <EEPROMWriteByte>

00000546 <EEPROMReadByte>:

// 8-bit read from EEPROM. The read needs to be atomic, so we want to disable
//   interrupts before starting it up to keep registers intact.
uint8_t EEPROMReadByte(uint8_t addr)
{
	cli();						// Disable interrupts.
 546:	f8 94       	cli
	while (EECR & (1<<EEPE));	// Wait for any writes to finish, to avoid
 548:	e1 99       	sbic	0x1c, 1	; 28
 54a:	fe cf       	rjmp	.-4      	; 0x548 <EEPROMReadByte+0x2>
								//   a resource conflict.
	EEAR = addr;				// See the datasheet for more details about
 54c:	8e bb       	out	0x1e, r24	; 30
	EECR += (1<<EERE);			//  this process.
 54e:	8c b3       	in	r24, 0x1c	; 28
 550:	8f 5f       	subi	r24, 0xFF	; 255
 552:	8c bb       	out	0x1c, r24	; 28
	sei();						// Re-enable the interrupts.
 554:	78 94       	sei
	return EEDR;				// Return the value at the address in question.
 556:	8d b3       	in	r24, 0x1d	; 29
}
 558:	08 95       	ret

0000055a <EEPROMReadWord>:
{
 55a:	1f 93       	push	r17
 55c:	cf 93       	push	r28
 55e:	df 93       	push	r29
 560:	18 2f       	mov	r17, r24
	readResult = (uint16_t)EEPROMReadByte(addr);	// Retrieve the high byte.
 562:	f1 df       	rcall	.-30     	; 0x546 <EEPROMReadByte>
 564:	c8 2f       	mov	r28, r24
 566:	d0 e0       	ldi	r29, 0x00	; 0
	readResult = readResult<<8;						// Left shift the hight byte.
 568:	dc 2f       	mov	r29, r28
 56a:	cc 27       	eor	r28, r28
	readResult |= (uint16_t)EEPROMReadByte(addr+1); // OR-in the low byte.
 56c:	81 e0       	ldi	r24, 0x01	; 1
 56e:	81 0f       	add	r24, r17
 570:	ea df       	rcall	.-44     	; 0x546 <EEPROMReadByte>
}
 572:	9e 01       	movw	r18, r28
 574:	28 2b       	or	r18, r24
 576:	c9 01       	movw	r24, r18
 578:	df 91       	pop	r29
 57a:	cf 91       	pop	r28
 57c:	1f 91       	pop	r17
 57e:	08 95       	ret

00000580 <spiXfer>:
//   unlike more advanced processors, the Tinty2313a does not support a
//   hands-off shift method. The data must be clocked out under software
//   control!
uint8_t spiXfer(uint8_t data)
{
	USIDR = data;
 580:	8f b9       	out	0x0f, r24	; 15
	while ((USISR & (1<<USIOIF)) == 0)
	{
		USICR = (0<<USIWM1) | (1<<USIWM0) | (1<<USICS1) | (0<<USICS0) | (1<<USICLK) | (1<<USITC);
 582:	8b e1       	ldi	r24, 0x1B	; 27
	while ((USISR & (1<<USIOIF)) == 0)
 584:	76 9b       	sbis	0x0e, 6	; 14
 586:	04 c0       	rjmp	.+8      	; 0x590 <spiXfer+0x10>
	}
	USISR = (1<<USIOIF);
 588:	80 e4       	ldi	r24, 0x40	; 64
 58a:	8e b9       	out	0x0e, r24	; 14
	return USIDR;
 58c:	8f b1       	in	r24, 0x0f	; 15
 58e:	08 95       	ret
		USICR = (0<<USIWM1) | (1<<USIWM0) | (1<<USICS1) | (0<<USICS0) | (1<<USICLK) | (1<<USITC);
 590:	8d b9       	out	0x0d, r24	; 13
 592:	f8 cf       	rjmp	.-16     	; 0x584 <spiXfer+0x4>

00000594 <main>:
	DDRA = (1<<PA1) | (1<<PA0);
 594:	83 e0       	ldi	r24, 0x03	; 3
 596:	8a bb       	out	0x1a, r24	; 26
	DDRB = (1<<PB7) | (1<<PB6) | (1<<PB4) | (1<<PB3) | (1<<PB2)| (1<<PB1) | (1<<PB0);
 598:	8f ed       	ldi	r24, 0xDF	; 223
 59a:	87 bb       	out	0x17, r24	; 23
	DDRD = (1<<PD6) | (1<<PD5) | (1<<PD4) | (1<<PD1);
 59c:	82 e7       	ldi	r24, 0x72	; 114
 59e:	81 bb       	out	0x11, r24	; 17
	PORTA = (0<<PA1) | (0<<PA0);
 5a0:	1b ba       	out	0x1b, r1	; 27
	PORTB = (1<<PB4) | (0<<PB3) | (0<<PB2) | (0<<PB1) | (0<<PB0);
 5a2:	80 e1       	ldi	r24, 0x10	; 16
 5a4:	88 bb       	out	0x18, r24	; 24
	PORTD = (1<<PD6) | (1<<PD5) | (1<<PD2) | (1<<PD0);
 5a6:	85 e6       	ldi	r24, 0x65	; 101
 5a8:	82 bb       	out	0x12, r24	; 18
	MCUCR = (0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
 5aa:	15 be       	out	0x35, r1	; 53
	GIMSK = (0<<INT1) | (0<<INT0);
 5ac:	1b be       	out	0x3b, r1	; 59
	USICR = (0<<USIWM1) | (1<<USIWM0) | (1<<USICS1) | (0<<USICS0) | (1<<USICLK);
 5ae:	8a e1       	ldi	r24, 0x1A	; 26
 5b0:	8d b9       	out	0x0d, r24	; 13
	USISR = (1<<USIOIF);
 5b2:	80 e4       	ldi	r24, 0x40	; 64
 5b4:	8e b9       	out	0x0e, r24	; 14
	UBRRH = 0;
 5b6:	12 b8       	out	0x02, r1	; 2
	UBRRL = 12;
 5b8:	8c e0       	ldi	r24, 0x0C	; 12
 5ba:	89 b9       	out	0x09, r24	; 9
	UCSRA = (1<<U2X);
 5bc:	82 e0       	ldi	r24, 0x02	; 2
 5be:	8b b9       	out	0x0b, r24	; 11
	UCSRB = (1<<RXCIE) | (1<<RXEN) | (1<<TXEN);
 5c0:	88 e9       	ldi	r24, 0x98	; 152
 5c2:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<UCSZ1) | (1<<UCSZ0);
 5c4:	86 e0       	ldi	r24, 0x06	; 6
 5c6:	83 b9       	out	0x03, r24	; 3
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 5c8:	85 b7       	in	r24, 0x35	; 53
 5ca:	80 65       	ori	r24, 0x50	; 80
 5cc:	85 bf       	out	0x35, r24	; 53
	if (EEPROMReadByte((uint8_t)KEY_ADDR) != KEY) EEPROMConfig();
 5ce:	8f e7       	ldi	r24, 0x7F	; 127
 5d0:	ba df       	rcall	.-140    	; 0x546 <EEPROMReadByte>
 5d2:	8b 37       	cpi	r24, 0x7B	; 123
 5d4:	09 f0       	breq	.+2      	; 0x5d8 <main+0x44>
 5d6:	5b dd       	rcall	.-1354   	; 0x8e <EEPROMConfig>
	EEPROMRetrieve();
 5d8:	42 dd       	rcall	.-1404   	; 0x5e <EEPROMRetrieve>
	ADXLConfig();
 5da:	78 df       	rcall	.-272    	; 0x4cc <ADXLConfig>
	TCCR1B = (1<<CS12) | (0<<CS11) | (1<<CS10);
 5dc:	85 e0       	ldi	r24, 0x05	; 5
 5de:	8e bd       	out	0x2e, r24	; 46
	TCNT1 = t1Offset;
 5e0:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <t1Offset>
 5e4:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <t1Offset+0x1>
 5e8:	9d bd       	out	0x2d, r25	; 45
 5ea:	8c bd       	out	0x2c, r24	; 44
	TIMSK = (1<<TOIE1);
 5ec:	80 e8       	ldi	r24, 0x80	; 128
 5ee:	89 bf       	out	0x39, r24	; 57
	loadOn();
 5f0:	94 9a       	sbi	0x12, 4	; 18
	sei();
 5f2:	78 94       	sei
	printMenu();
 5f4:	67 dd       	rcall	.-1330   	; 0xc4 <printMenu>
			GIMSK = (1<<INT0) |(1<<INT1);// Enable external interrupts to wake the
 5f6:	c0 ec       	ldi	r28, 0xC0	; 192
		if (sleepyTime == TRUE)
 5f8:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <sleepyTime>
 5fc:	81 30       	cpi	r24, 0x01	; 1
 5fe:	89 f4       	brne	.+34     	; 0x622 <main+0x8e>
			serialWrite("z");			// Let the user know sleep mode is coming.
 600:	81 e6       	ldi	r24, 0x61	; 97
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	bc de       	rcall	.-648    	; 0x37e <serialWrite>
			ADXLConfig();
 606:	62 df       	rcall	.-316    	; 0x4cc <ADXLConfig>
			GIMSK = (1<<INT0) |(1<<INT1);// Enable external interrupts to wake the
 608:	cb bf       	out	0x3b, r28	; 59
			loadOff();					// Turn off the load for sleepy time.
 60a:	82 b3       	in	r24, 0x12	; 18
 60c:	12 ba       	out	0x12, r1	; 18
			sleep_mode();				// Go to sleep until awoken by an interrupt.
 60e:	85 b7       	in	r24, 0x35	; 53
 610:	80 62       	ori	r24, 0x20	; 32
 612:	85 bf       	out	0x35, r24	; 53
 614:	88 95       	sleep
 616:	85 b7       	in	r24, 0x35	; 53
 618:	8f 7d       	andi	r24, 0xDF	; 223
 61a:	85 bf       	out	0x35, r24	; 53
			EEPROMRetrieve();			// Retrieve EEPROM values, mostly to print
 61c:	20 dd       	rcall	.-1472   	; 0x5e <EEPROMRetrieve>
			printMenu();
 61e:	52 dd       	rcall	.-1372   	; 0xc4 <printMenu>
			loadOn();					// Turn the load back on.
 620:	94 9a       	sbi	0x12, 4	; 18
		if (serialRxData != 0) serialParse();
 622:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 626:	88 23       	and	r24, r24
 628:	39 f3       	breq	.-50     	; 0x5f8 <main+0x64>
 62a:	52 dd       	rcall	.-1372   	; 0xd0 <serialParse>
 62c:	e5 cf       	rjmp	.-54     	; 0x5f8 <main+0x64>

0000062e <__mulhi3>:
 62e:	00 24       	eor	r0, r0
 630:	55 27       	eor	r21, r21
 632:	04 c0       	rjmp	.+8      	; 0x63c <__mulhi3+0xe>
 634:	08 0e       	add	r0, r24
 636:	59 1f       	adc	r21, r25
 638:	88 0f       	add	r24, r24
 63a:	99 1f       	adc	r25, r25
 63c:	00 97       	sbiw	r24, 0x00	; 0
 63e:	29 f0       	breq	.+10     	; 0x64a <__mulhi3+0x1c>
 640:	76 95       	lsr	r23
 642:	67 95       	ror	r22
 644:	b8 f3       	brcs	.-18     	; 0x634 <__mulhi3+0x6>
 646:	71 05       	cpc	r23, r1
 648:	b9 f7       	brne	.-18     	; 0x638 <__mulhi3+0xa>
 64a:	80 2d       	mov	r24, r0
 64c:	95 2f       	mov	r25, r21
 64e:	08 95       	ret

00000650 <__udivmodhi4>:
 650:	aa 1b       	sub	r26, r26
 652:	bb 1b       	sub	r27, r27
 654:	51 e1       	ldi	r21, 0x11	; 17
 656:	07 c0       	rjmp	.+14     	; 0x666 <__udivmodhi4_ep>

00000658 <__udivmodhi4_loop>:
 658:	aa 1f       	adc	r26, r26
 65a:	bb 1f       	adc	r27, r27
 65c:	a6 17       	cp	r26, r22
 65e:	b7 07       	cpc	r27, r23
 660:	10 f0       	brcs	.+4      	; 0x666 <__udivmodhi4_ep>
 662:	a6 1b       	sub	r26, r22
 664:	b7 0b       	sbc	r27, r23

00000666 <__udivmodhi4_ep>:
 666:	88 1f       	adc	r24, r24
 668:	99 1f       	adc	r25, r25
 66a:	5a 95       	dec	r21
 66c:	a9 f7       	brne	.-22     	; 0x658 <__udivmodhi4_loop>
 66e:	80 95       	com	r24
 670:	90 95       	com	r25
 672:	bc 01       	movw	r22, r24
 674:	cd 01       	movw	r24, r26
 676:	08 95       	ret

00000678 <_exit>:
 678:	f8 94       	cli

0000067a <__stop_program>:
 67a:	ff cf       	rjmp	.-2      	; 0x67a <__stop_program>
