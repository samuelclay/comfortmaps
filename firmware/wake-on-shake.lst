   1               		.file	"wake-on-shake.c"
   2               	__SP_L__ = 0x3d
   3               	__SREG__ = 0x3f
   4               	__tmp_reg__ = 0
   5               	__zero_reg__ = 1
   6               		.text
   7               	.Ltext0:
   8               		.cfi_sections	.debug_frame
   9               	.global	EEPROMRetrieve
  11               	EEPROMRetrieve:
  12               	.LFB1:
  13               		.file 1 "wake-on-shake.c"
   1:wake-on-shake.c **** /******************************************************************************
   2:wake-on-shake.c **** Created 26 Nov 2012 by Mike Hord at SparkFun Electronics.
   3:wake-on-shake.c **** Wake-on-Shake hardware and firmware are released under the Creative Commons 
   4:wake-on-shake.c **** Share Alike v3.0 license:
   5:wake-on-shake.c **** 	http://creativecommons.org/licenses/by-sa/3.0/
   6:wake-on-shake.c **** Feel free to use, distribute, and sell variants of Wake-on-Shake. All we ask 
   7:wake-on-shake.c **** is that you include attribution of 'Based on Wake-on-Shake by SparkFun'.
   8:wake-on-shake.c **** 
   9:wake-on-shake.c **** Original wake-on-shake concept by Nitzan Gadish, Analog Devices
  10:wake-on-shake.c **** 
  11:wake-on-shake.c **** Wake-on-Shake is a simple but powerful board designed to power up a larger
  12:wake-on-shake.c **** circuit when it detects motion. The load has the option of holding its power
  13:wake-on-shake.c **** even after the Wake-on-Shake releases it, so the load circuit can complete its
  14:wake-on-shake.c **** "mission".
  15:wake-on-shake.c **** 
  16:wake-on-shake.c **** It also provides a very simple UI which can be used to set the time before
  17:wake-on-shake.c **** shutdown and wake-up sensitivity. There are other, more powerful features
  18:wake-on-shake.c **** available, but most users will not need them.
  19:wake-on-shake.c **** 
  20:wake-on-shake.c **** ******************************************************************************/
  21:wake-on-shake.c **** // avrdude programming string
  22:wake-on-shake.c **** //avrdude -p t2313 -B 10 -P usb -c avrispmkii -U flash:w:Wake-on-Shake.hex -U hfuse:w:0xdf:m -U lfu
  23:wake-on-shake.c **** 
  24:wake-on-shake.c **** #include <avr/io.h>
  25:wake-on-shake.c **** #include <avr/sleep.h>
  26:wake-on-shake.c **** #include <avr/interrupt.h>
  27:wake-on-shake.c **** #include "serial.h"
  28:wake-on-shake.c **** #include "eeprom.h"
  29:wake-on-shake.c **** #include "wake-on-shake.h"
  30:wake-on-shake.c **** #include "interrupts.h"
  31:wake-on-shake.c **** #include "spi.h"
  32:wake-on-shake.c **** #include "ADXL362.h"
  33:wake-on-shake.c **** #include "xl362.h"
  34:wake-on-shake.c **** #include "ui.h"
  35:wake-on-shake.c **** 
  36:wake-on-shake.c **** uint16_t			t1Offset;			// This value, when written to TCNT1, 
  37:wake-on-shake.c **** 										//   is the offset to the delay before
  38:wake-on-shake.c **** 										//   sleep. It is 65535 - (delay)ms.
  39:wake-on-shake.c **** volatile uint8_t	sleepyTime = FALSE; // Flag used to communicate from the
  40:wake-on-shake.c **** 										//   ISR to the main program to send
  41:wake-on-shake.c **** 										//   the device into sleep mode.
  42:wake-on-shake.c **** volatile uint8_t    serialRxData = 0;	// Data passing variable to get data
  43:wake-on-shake.c **** 										//   from the receive ISR back to main.
  44:wake-on-shake.c **** 										
  45:wake-on-shake.c **** // main(). If you don't know what this is, you need to do some serious
  46:wake-on-shake.c **** //  work on your fundamentals.
  47:wake-on-shake.c **** 
  48:wake-on-shake.c **** int main(void)
  49:wake-on-shake.c **** {
  50:wake-on-shake.c **** 	// First, let's configure the directions (in/out) of the various pins. Writing a
  51:wake-on-shake.c **** 	//   '1' to the appropriate bit in a DDRx register will render that pin an
  52:wake-on-shake.c **** 	//   output.
  53:wake-on-shake.c **** 	
  54:wake-on-shake.c **** 	// Port A- both pins are unused, so we'll make them both outputs and drive them
  55:wake-on-shake.c **** 	//   low to save power.
  56:wake-on-shake.c **** 	DDRA = (1<<PA1) | (1<<PA0);
  57:wake-on-shake.c **** 	// Port B- PB0-3 are unused; make them outputs and tie them low. PB4 is !CS
  58:wake-on-shake.c **** 	//   for the ADXL362, so it should be an output. PB5 is MISO from the ADXL362, so
  59:wake-on-shake.c **** 	//   leave it an input. PB6 is MOSI to ADXL362, and PB7 is SCK, so they should be
  60:wake-on-shake.c **** 	//   outputs.
  61:wake-on-shake.c **** 	DDRB = (1<<PB7) | (1<<PB6) | (1<<PB4) | (1<<PB3) | (1<<PB2)| (1<<PB1) | (1<<PB0);
  62:wake-on-shake.c **** 	// No port C pins on this chip
  63:wake-on-shake.c **** 	// Port D- PD0 is the serial receive input. PD1 is serial transmit output. PD2 is
  64:wake-on-shake.c **** 	//   is an external interrupt used to wake the processor on serial activity. PD3
  65:wake-on-shake.c **** 	//   is the interrupt from the ADXL362, used to wake the device on detected
  66:wake-on-shake.c **** 	//   motion. PD4 is the MOSFET turn-on signal, so should be an output. PD5 and
  67:wake-on-shake.c **** 	//   PD6 are unused; make them outputs and tie them low. PD7 doesn't exist.
  68:wake-on-shake.c **** 	DDRD = (1<<PD6) | (1<<PD5) | (1<<PD4) | (1<<PD1);
  69:wake-on-shake.c **** 	
  70:wake-on-shake.c **** 	// Now let's configure some initial IO states
  71:wake-on-shake.c **** 	
  72:wake-on-shake.c **** 	// Port A- both set low to reduce current consumption
  73:wake-on-shake.c **** 	PORTA = (0<<PA1) | (0<<PA0);
  74:wake-on-shake.c **** 	// Port B- PB0-3 should be low for power consumption; PB4 is !CS, so bring it
  75:wake-on-shake.c **** 	//   high to keep the ADXL362 non-selected. Others are don't care.
  76:wake-on-shake.c **** 	PORTB = (1<<PB4) | (0<<PB3) | (0<<PB2) | (0<<PB1) | (0<<PB0);
  77:wake-on-shake.c **** 	// Port C doesn't exist
  78:wake-on-shake.c **** 	// Port D- PD5 and PD6 should be tied low; others are (for now) don't care.
  79:wake-on-shake.c **** 	//   Also, PD2/PD0 should be made high to enable pullup resistor for when no
  80:wake-on-shake.c **** 	//   serial connection is present.
  81:wake-on-shake.c **** 	PORTD = (1<<PD6) | (1<<PD5) | (1<<PD2) | (1<<PD0);
  82:wake-on-shake.c **** 	
  83:wake-on-shake.c **** 	// Interrupt configuration is next. We'll need two interrupts: INT0 and INT1.
  84:wake-on-shake.c **** 	//   INT0 will wiggle when a serial connection occurs. INT1 will wiggle when
  85:wake-on-shake.c **** 	//   the ADXL362 detects motion and wakes up.
  86:wake-on-shake.c **** 	
  87:wake-on-shake.c **** 	// MCUCR- Bits 0:3 control the interrupt event we want to be sensitive to.
  88:wake-on-shake.c **** 	//   We'll set it so a low level is what each pin is looking for.
  89:wake-on-shake.c **** 	MCUCR = (0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
  90:wake-on-shake.c **** 	// GIMSK- These are mask bits for the pin change interrupts. Writing a '1'
  91:wake-on-shake.c **** 	//   enables the appropriate interrupt.
  92:wake-on-shake.c **** 	GIMSK = (0<<INT1) | (0<<INT0);
  93:wake-on-shake.c **** 	
  94:wake-on-shake.c **** 	// Now, set up the USI peripheral for communication with the ADXL362 part.
  95:wake-on-shake.c **** 	//   The ADXL362 uses SPI Mode 0- CPHA = CPOL = 0.
  96:wake-on-shake.c **** 	
  97:wake-on-shake.c **** 	// UISCR- USWM1:0 are mode select pins; 01 is three-wire mode.
  98:wake-on-shake.c **** 	//   USICS1:0 are clock source select pins; 10 is software control.
  99:wake-on-shake.c **** 	//   USICLK puts the 4-bit data counter under software control.
 100:wake-on-shake.c **** 	//   Strobing USITC toggles the 4-bit clock signal.
 101:wake-on-shake.c **** 	USICR = (0<<USIWM1) | (1<<USIWM0) | (1<<USICS1) | (0<<USICS0) | (1<<USICLK);
 102:wake-on-shake.c **** 	// USISR- Writing '1' to USIOIF will clear the 4-bit counter overflow
 103:wake-on-shake.c **** 	//   flag and ready it for the next transfer. Implicit here is a write
 104:wake-on-shake.c **** 	//   of zeroes to bits 3:0 of this register, which also clears the 4-bit
 105:wake-on-shake.c **** 	//   counter.
 106:wake-on-shake.c **** 	USISR = (1<<USIOIF);
 107:wake-on-shake.c **** 	
 108:wake-on-shake.c **** 	// Set up the USART peripheral for writing in and out. This isn't used
 109:wake-on-shake.c **** 	//   during normal operation- only during user configuration. We'll
 110:wake-on-shake.c **** 	//   set the mode to 9600 baud, 8-N-1. Pretty standard, really.
 111:wake-on-shake.c **** 
 112:wake-on-shake.c **** 	// For 9600 baud, at 1.000MHz (which is our clock speed, since we're
 113:wake-on-shake.c **** 	//   using the internal oscillator clocked down), UBRR should be set to
 114:wake-on-shake.c **** 	//   12, and the U2X bit of UCSRA should be set to '1'.
 115:wake-on-shake.c **** 	UBRRH = 0;
 116:wake-on-shake.c **** 	UBRRL = 12;
 117:wake-on-shake.c **** 	UCSRA = (1<<U2X);
 118:wake-on-shake.c **** 	// UCSRB- RXEN and TXEN enable the transmit and receive circuitry.
 119:wake-on-shake.c **** 	//   UCSZ2 is a frame size bit; when set to 0 (as here), the size is
 120:wake-on-shake.c **** 	//   determined by UCSZ1:0 in UCSRC. RXCIE is the receive interrupt
 121:wake-on-shake.c **** 	//   enable bit; we want that interrupt for handling incoming settings
 122:wake-on-shake.c **** 	//   changes while the part is awake.
 123:wake-on-shake.c **** 	UCSRB = (1<<RXCIE) | (1<<RXEN) | (1<<TXEN);
 124:wake-on-shake.c **** 	// UCSRC- Setting UCSZ1:0 to '1' gives us an 8-bit frame size. There
 125:wake-on-shake.c **** 	//   are provisions in this register for synchronous mode, parity,
 126:wake-on-shake.c **** 	//   and stop-bit count, but we'll ignore them.
 127:wake-on-shake.c **** 	UCSRC = (1<<UCSZ1) | (1<<UCSZ0);
 128:wake-on-shake.c **** 
 129:wake-on-shake.c **** 	// set_sleep_mode() is a nice little macro from the sleep library which
 130:wake-on-shake.c **** 	//   sets the stage nicely for sleep; after this, all you need to do is
 131:wake-on-shake.c **** 	//   call sleep_mode() to put the processor to sleep. Power Down mode is
 132:wake-on-shake.c **** 	//   the lowest possible sleep power state; all clocks are stopped and
 133:wake-on-shake.c **** 	//   only an external interrupt can wake the processor.
 134:wake-on-shake.c **** 	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 135:wake-on-shake.c **** 	
 136:wake-on-shake.c **** 	// Check to make sure the EEPROM has been configured for first use by
 137:wake-on-shake.c **** 	//   looking at the "key" location. If not, configure it.
 138:wake-on-shake.c **** 	if (EEPROMReadByte((uint8_t)KEY_ADDR) != KEY) EEPROMConfig();
 139:wake-on-shake.c **** 	
 140:wake-on-shake.c **** 	// EEPROMRetrieve() pulls the various operational parameters out of
 141:wake-on-shake.c **** 	//   EEPROM and puts them in SRAM.
 142:wake-on-shake.c **** 	EEPROMRetrieve();
 143:wake-on-shake.c **** 	
 144:wake-on-shake.c **** 	// Configure the ADXL362 with the info we just pulled from EEPROM.
 145:wake-on-shake.c **** 	ADXLConfig();
 146:wake-on-shake.c **** 
 147:wake-on-shake.c **** 	// We need to set up Timer1 as an overflow interrupt so the device can
 148:wake-on-shake.c **** 	//   stay awake long enough for the user to input some parameters.
 149:wake-on-shake.c **** 	//   Timer1 is a 16-bit counter; I'm going to set it up so that it ticks
 150:wake-on-shake.c **** 	//   over every 10 seconds when the device is awake, and when it ticks,
 151:wake-on-shake.c **** 	//   the device drops back into sleep.
 152:wake-on-shake.c **** 	// TCCR1B- 101 in CS1 bits divides the clock by 1024; ~one count per ms.
 153:wake-on-shake.c **** 	TCCR1B = (1<<CS12) | (0<<CS11) | (1<<CS10);
 154:wake-on-shake.c **** 	// TCNT1- When this hits 65,536, an overflow interrupt occurs. By
 155:wake-on-shake.c **** 	//   "priming" it, we reduce the time until an interrupt occurs.
 156:wake-on-shake.c **** 	//   The if/else is to prevent the user accidentally
 157:wake-on-shake.c **** 	//   setting it so low that the part goes back to sleep before it can be
 158:wake-on-shake.c **** 	//   reprogrammed by the user through the command line.
 159:wake-on-shake.c **** 	TCNT1 = t1Offset;
 160:wake-on-shake.c **** 	// TIMSK- Set TOIE1 to enable Timer1 overflow interrupt
 161:wake-on-shake.c **** 	TIMSK = (1<<TOIE1);
 162:wake-on-shake.c **** 	
 163:wake-on-shake.c **** 	// loadOn() is a simple function that turns on the load. We'll turn it on
 164:wake-on-shake.c **** 	//   now and leave it on until sleep.
 165:wake-on-shake.c **** 	loadOn();
 166:wake-on-shake.c **** 		
 167:wake-on-shake.c **** 	// sei() is a macro that basically executes the single instruction
 168:wake-on-shake.c **** 	//   global interrupt enable function. Up until now, interrupt sources
 169:wake-on-shake.c **** 	//   are ignored. We will turn this on and leave it on, unless we need
 170:wake-on-shake.c **** 	//   to perform some sensitive tasks which require interrupts disabled
 171:wake-on-shake.c **** 	//   for a time.
 172:wake-on-shake.c **** 	sei();
 173:wake-on-shake.c **** 	
 174:wake-on-shake.c **** 	// Okay, now we can move forward with our main application code. This loop
 175:wake-on-shake.c **** 	//   will just run over and over forever, waiting for signals from interrupts
 176:wake-on-shake.c **** 	//   to tell it what to do.
 177:wake-on-shake.c **** 	printMenu();
 178:wake-on-shake.c **** 	while(1)
 179:wake-on-shake.c **** 	{
 180:wake-on-shake.c **** 		// The main functionality is to go to sleep when there's been no activity
 181:wake-on-shake.c **** 		//   for some time; if Timer1 manages to overflow, it will set sleepyTime
 182:wake-on-shake.c **** 		//   true.
 183:wake-on-shake.c **** 		if (sleepyTime == TRUE)
 184:wake-on-shake.c **** 		{
 185:wake-on-shake.c **** 			serialWrite("z");			// Let the user know sleep mode is coming.
 186:wake-on-shake.c **** 			ADXLConfig();
 187:wake-on-shake.c **** 			GIMSK = (1<<INT0) |(1<<INT1);// Enable external interrupts to wake the
 188:wake-on-shake.c **** 										//   processor up; INT0 is incoming serial
 189:wake-on-shake.c **** 										//   data, INT1 is accelerometer interrupt
 190:wake-on-shake.c **** 			loadOff();					// Turn off the load for sleepy time.
 191:wake-on-shake.c **** 			sleep_mode();				// Go to sleep until awoken by an interrupt.
 192:wake-on-shake.c **** 			EEPROMRetrieve();			// Retrieve EEPROM values, mostly to print
 193:wake-on-shake.c **** 										//   them out to the user, if the wake-up
 194:wake-on-shake.c **** 										//   was due to serial data arriving.
 195:wake-on-shake.c **** 			printMenu();
 196:wake-on-shake.c **** 			loadOn();					// Turn the load back on.
 197:wake-on-shake.c **** 		}
 198:wake-on-shake.c **** 		// Any data arriving over the serial port will trigger a serial receive
 199:wake-on-shake.c **** 		//   interrupt. If that data is non-null, serialParse() will be called to
 200:wake-on-shake.c **** 		//   deal with it.
 201:wake-on-shake.c **** 		if (serialRxData != 0) serialParse();
 202:wake-on-shake.c **** 	}
 203:wake-on-shake.c **** }
 204:wake-on-shake.c **** 
 205:wake-on-shake.c **** // Utility function which pulls the various operational paramters out of EEPROM,
 206:wake-on-shake.c **** //   puts them into SRAM, and prints them over the serial line.
 207:wake-on-shake.c **** void EEPROMRetrieve(void)
 208:wake-on-shake.c **** {
  14               		.loc 1 208 1 view -0
  15               		.cfi_startproc
  16 0000 CF93      		push r28
  17               	.LCFI0:
  18               		.cfi_def_cfa_offset 3
  19               		.cfi_offset 28, -2
  20 0002 DF93      		push r29
  21               	.LCFI1:
  22               		.cfi_def_cfa_offset 4
  23               		.cfi_offset 29, -3
  24               	/* prologue: function */
  25               	/* frame size = 0 */
  26               	/* stack size = 2 */
  27               	.L__stack_usage = 2
 209:wake-on-shake.c **** 	uint16_t threshold = EEPROMReadWord((uint8_t)ATHRESH);		// Activity threshold. See
  28               		.loc 1 209 2 view .LVU1
  29               		.loc 1 209 23 is_stmt 0 view .LVU2
  30 0004 80E0      		ldi r24,0
  31 0006 00D0      		rcall EEPROMReadWord
  32               	.LVL0:
  33 0008 D82F      		mov r29,r24
  34 000a C92F      		mov r28,r25
  35               	.LVL1:
 210:wake-on-shake.c **** 														//   ADXL362 datasheet for info.
 211:wake-on-shake.c **** 	t1Offset =  EEPROMReadWord((uint8_t)WAKE_OFFS);     // (65535 - t1Offset)ms elapse
  36               		.loc 1 211 2 is_stmt 1 view .LVU3
  37               		.loc 1 211 14 is_stmt 0 view .LVU4
  38 000c 82E0      		ldi r24,lo8(2)
  39               	.LVL2:
  40               		.loc 1 211 14 view .LVU5
  41 000e 00D0      		rcall EEPROMReadWord
  42               	.LVL3:
  43               		.loc 1 211 11 view .LVU6
  44 0010 9093 0000 		sts t1Offset+1,r25
  45 0014 8093 0000 		sts t1Offset,r24
 212:wake-on-shake.c **** 														//   between Timer1 interrupts.
 213:wake-on-shake.c **** 	serialWriteInt(threshold);							// Print threshold in human format.
  46               		.loc 1 213 2 is_stmt 1 view .LVU7
  47 0018 8D2F      		mov r24,r29
  48 001a 9C2F      		mov r25,r28
  49 001c 00D0      		rcall serialWriteInt
  50               	.LVL4:
 214:wake-on-shake.c **** 	serialWriteInt(65535 - t1Offset);					// Print the delay before sleep
  51               		.loc 1 214 2 view .LVU8
  52 001e 8091 0000 		lds r24,t1Offset
  53 0022 9091 0000 		lds r25,t1Offset+1
  54 0026 8095      		com r24
  55 0028 9095      		com r25
  56               	/* epilogue start */
 215:wake-on-shake.c **** 														//   in human format.
 216:wake-on-shake.c **** }
  57               		.loc 1 216 1 is_stmt 0 view .LVU9
  58 002a DF91      		pop r29
  59               	.LVL5:
  60               		.loc 1 216 1 view .LVU10
  61 002c CF91      		pop r28
 214:wake-on-shake.c **** 	serialWriteInt(65535 - t1Offset);					// Print the delay before sleep
  62               		.loc 1 214 2 view .LVU11
  63 002e 00C0      		rjmp serialWriteInt
  64               	.LVL6:
  65               		.cfi_endproc
  66               	.LFE1:
  68               	.global	EEPROMConfig
  70               	EEPROMConfig:
  71               	.LFB2:
 217:wake-on-shake.c **** 
 218:wake-on-shake.c **** // Configuration function for EEPROM- "erased" for the EEPROM is 65535, so we need to
 219:wake-on-shake.c **** //   change these to more manageable values the first time the board powers up, or the
 220:wake-on-shake.c **** //   sleep interrupt will happen WAY too fast and the motion threshold will be WAY too
 221:wake-on-shake.c **** //   high for practicality.
 222:wake-on-shake.c **** void EEPROMConfig(void)
 223:wake-on-shake.c **** {
  72               		.loc 1 223 1 is_stmt 1 view -0
  73               		.cfi_startproc
  74               	/* prologue: function */
  75               	/* frame size = 0 */
  76               	/* stack size = 0 */
  77               	.L__stack_usage = 0
 224:wake-on-shake.c ****     // t1Offset  = 63535;        // Corresponds to ~5s delay before going to sleep
 225:wake-on-shake.c ****     t1Offset  = 535;        // Corresponds to ~59.5s delay before going to sleep
  78               		.loc 1 225 5 view .LVU13
  79               		.loc 1 225 15 is_stmt 0 view .LVU14
  80 0030 87E1      		ldi r24,lo8(23)
  81 0032 92E0      		ldi r25,lo8(2)
  82 0034 9093 0000 		sts t1Offset+1,r25
  83 0038 8093 0000 		sts t1Offset,r24
 226:wake-on-shake.c **** 	// Now let's store these, along with the "key" that let's us know we've done this.
 227:wake-on-shake.c **** 	EEPROMWriteWord((uint8_t)ATHRESH, (uint16_t) 150);
  84               		.loc 1 227 2 is_stmt 1 view .LVU15
  85 003c 66E9      		ldi r22,lo8(-106)
  86 003e 70E0      		ldi r23,0
  87 0040 80E0      		ldi r24,0
  88 0042 00D0      		rcall EEPROMWriteWord
  89               	.LVL7:
 228:wake-on-shake.c **** 	EEPROMWriteWord((uint8_t)WAKE_OFFS, (uint16_t)t1Offset);
  90               		.loc 1 228 2 view .LVU16
  91 0044 6091 0000 		lds r22,t1Offset
  92 0048 7091 0000 		lds r23,t1Offset+1
  93 004c 82E0      		ldi r24,lo8(2)
  94 004e 00D0      		rcall EEPROMWriteWord
  95               	.LVL8:
 229:wake-on-shake.c **** 	EEPROMWriteWord((uint8_t)ITHRESH, (uint16_t)50);
  96               		.loc 1 229 2 view .LVU17
  97 0050 62E3      		ldi r22,lo8(50)
  98 0052 70E0      		ldi r23,0
  99 0054 84E0      		ldi r24,lo8(4)
 100 0056 00D0      		rcall EEPROMWriteWord
 101               	.LVL9:
 230:wake-on-shake.c **** 	EEPROMWriteWord((uint8_t)ITIME, (uint16_t)15);
 102               		.loc 1 230 2 view .LVU18
 103 0058 6FE0      		ldi r22,lo8(15)
 104 005a 70E0      		ldi r23,0
 105 005c 86E0      		ldi r24,lo8(6)
 106 005e 00D0      		rcall EEPROMWriteWord
 107               	.LVL10:
 231:wake-on-shake.c **** 	EEPROMWriteByte((uint8_t)KEY_ADDR, (uint8_t)KEY);
 108               		.loc 1 231 2 view .LVU19
 109 0060 6BE7      		ldi r22,lo8(123)
 110 0062 8FE7      		ldi r24,lo8(127)
 111 0064 00C0      		rjmp EEPROMWriteByte
 112               	.LVL11:
 113               		.cfi_endproc
 114               	.LFE2:
 116               		.section	.rodata.str1.1,"aMS",@progbits,1
 117               	.LC0:
 118 0000 7A00      		.string	"z"
 119               		.section	.text.startup,"ax",@progbits
 120               	.global	main
 122               	main:
 123               	.LFB0:
  49:wake-on-shake.c **** 	// First, let's configure the directions (in/out) of the various pins. Writing a
 124               		.loc 1 49 1 view -0
 125               		.cfi_startproc
 126               	/* prologue: function */
 127               	/* frame size = 0 */
 128               	/* stack size = 0 */
 129               	.L__stack_usage = 0
  56:wake-on-shake.c **** 	// Port B- PB0-3 are unused; make them outputs and tie them low. PB4 is !CS
 130               		.loc 1 56 2 view .LVU21
  56:wake-on-shake.c **** 	// Port B- PB0-3 are unused; make them outputs and tie them low. PB4 is !CS
 131               		.loc 1 56 7 is_stmt 0 view .LVU22
 132 0000 83E0      		ldi r24,lo8(3)
 133 0002 8ABB      		out 0x1a,r24
  61:wake-on-shake.c **** 	// No port C pins on this chip
 134               		.loc 1 61 2 is_stmt 1 view .LVU23
  61:wake-on-shake.c **** 	// No port C pins on this chip
 135               		.loc 1 61 7 is_stmt 0 view .LVU24
 136 0004 8FED      		ldi r24,lo8(-33)
 137 0006 87BB      		out 0x17,r24
  68:wake-on-shake.c **** 	
 138               		.loc 1 68 2 is_stmt 1 view .LVU25
  68:wake-on-shake.c **** 	
 139               		.loc 1 68 7 is_stmt 0 view .LVU26
 140 0008 82E7      		ldi r24,lo8(114)
 141 000a 81BB      		out 0x11,r24
  73:wake-on-shake.c **** 	// Port B- PB0-3 should be low for power consumption; PB4 is !CS, so bring it
 142               		.loc 1 73 2 is_stmt 1 view .LVU27
  73:wake-on-shake.c **** 	// Port B- PB0-3 should be low for power consumption; PB4 is !CS, so bring it
 143               		.loc 1 73 8 is_stmt 0 view .LVU28
 144 000c 1BBA      		out 0x1b,__zero_reg__
  76:wake-on-shake.c **** 	// Port C doesn't exist
 145               		.loc 1 76 2 is_stmt 1 view .LVU29
  76:wake-on-shake.c **** 	// Port C doesn't exist
 146               		.loc 1 76 8 is_stmt 0 view .LVU30
 147 000e 80E1      		ldi r24,lo8(16)
 148 0010 88BB      		out 0x18,r24
  81:wake-on-shake.c **** 	
 149               		.loc 1 81 2 is_stmt 1 view .LVU31
  81:wake-on-shake.c **** 	
 150               		.loc 1 81 8 is_stmt 0 view .LVU32
 151 0012 85E6      		ldi r24,lo8(101)
 152 0014 82BB      		out 0x12,r24
  89:wake-on-shake.c **** 	// GIMSK- These are mask bits for the pin change interrupts. Writing a '1'
 153               		.loc 1 89 2 is_stmt 1 view .LVU33
  89:wake-on-shake.c **** 	// GIMSK- These are mask bits for the pin change interrupts. Writing a '1'
 154               		.loc 1 89 8 is_stmt 0 view .LVU34
 155 0016 15BE      		out 0x35,__zero_reg__
  92:wake-on-shake.c **** 	
 156               		.loc 1 92 2 is_stmt 1 view .LVU35
  92:wake-on-shake.c **** 	
 157               		.loc 1 92 8 is_stmt 0 view .LVU36
 158 0018 1BBE      		out 0x3b,__zero_reg__
 101:wake-on-shake.c **** 	// USISR- Writing '1' to USIOIF will clear the 4-bit counter overflow
 159               		.loc 1 101 2 is_stmt 1 view .LVU37
 101:wake-on-shake.c **** 	// USISR- Writing '1' to USIOIF will clear the 4-bit counter overflow
 160               		.loc 1 101 8 is_stmt 0 view .LVU38
 161 001a 8AE1      		ldi r24,lo8(26)
 162 001c 8DB9      		out 0xd,r24
 106:wake-on-shake.c **** 	
 163               		.loc 1 106 2 is_stmt 1 view .LVU39
 106:wake-on-shake.c **** 	
 164               		.loc 1 106 8 is_stmt 0 view .LVU40
 165 001e 80E4      		ldi r24,lo8(64)
 166 0020 8EB9      		out 0xe,r24
 115:wake-on-shake.c **** 	UBRRL = 12;
 167               		.loc 1 115 2 is_stmt 1 view .LVU41
 115:wake-on-shake.c **** 	UBRRL = 12;
 168               		.loc 1 115 8 is_stmt 0 view .LVU42
 169 0022 12B8      		out 0x2,__zero_reg__
 116:wake-on-shake.c **** 	UCSRA = (1<<U2X);
 170               		.loc 1 116 2 is_stmt 1 view .LVU43
 116:wake-on-shake.c **** 	UCSRA = (1<<U2X);
 171               		.loc 1 116 8 is_stmt 0 view .LVU44
 172 0024 8CE0      		ldi r24,lo8(12)
 173 0026 89B9      		out 0x9,r24
 117:wake-on-shake.c **** 	// UCSRB- RXEN and TXEN enable the transmit and receive circuitry.
 174               		.loc 1 117 2 is_stmt 1 view .LVU45
 117:wake-on-shake.c **** 	// UCSRB- RXEN and TXEN enable the transmit and receive circuitry.
 175               		.loc 1 117 8 is_stmt 0 view .LVU46
 176 0028 82E0      		ldi r24,lo8(2)
 177 002a 8BB9      		out 0xb,r24
 123:wake-on-shake.c **** 	// UCSRC- Setting UCSZ1:0 to '1' gives us an 8-bit frame size. There
 178               		.loc 1 123 2 is_stmt 1 view .LVU47
 123:wake-on-shake.c **** 	// UCSRC- Setting UCSZ1:0 to '1' gives us an 8-bit frame size. There
 179               		.loc 1 123 8 is_stmt 0 view .LVU48
 180 002c 88E9      		ldi r24,lo8(-104)
 181 002e 8AB9      		out 0xa,r24
 127:wake-on-shake.c **** 
 182               		.loc 1 127 2 is_stmt 1 view .LVU49
 127:wake-on-shake.c **** 
 183               		.loc 1 127 8 is_stmt 0 view .LVU50
 184 0030 86E0      		ldi r24,lo8(6)
 185 0032 83B9      		out 0x3,r24
 134:wake-on-shake.c **** 	
 186               		.loc 1 134 2 is_stmt 1 view .LVU51
 134:wake-on-shake.c **** 	
 187               		.loc 1 134 2 view .LVU52
 188 0034 85B7      		in r24,0x35
 189 0036 8065      		ori r24,lo8(80)
 190 0038 85BF      		out 0x35,r24
 134:wake-on-shake.c **** 	
 191               		.loc 1 134 2 view .LVU53
 138:wake-on-shake.c **** 	
 192               		.loc 1 138 2 view .LVU54
 138:wake-on-shake.c **** 	
 193               		.loc 1 138 6 is_stmt 0 view .LVU55
 194 003a 8FE7      		ldi r24,lo8(127)
 195 003c 00D0      		rcall EEPROMReadByte
 196               	.LVL12:
 138:wake-on-shake.c **** 	
 197               		.loc 1 138 5 view .LVU56
 198 003e 8B37      		cpi r24,lo8(123)
 199 0040 01F0      		breq .L4
 138:wake-on-shake.c **** 	
 200               		.loc 1 138 48 is_stmt 1 discriminator 1 view .LVU57
 201 0042 00D0      		rcall EEPROMConfig
 202               	.LVL13:
 203               	.L4:
 142:wake-on-shake.c **** 	
 204               		.loc 1 142 2 view .LVU58
 205 0044 00D0      		rcall EEPROMRetrieve
 206               	.LVL14:
 145:wake-on-shake.c **** 
 207               		.loc 1 145 2 view .LVU59
 208 0046 00D0      		rcall ADXLConfig
 209               	.LVL15:
 153:wake-on-shake.c **** 	// TCNT1- When this hits 65,536, an overflow interrupt occurs. By
 210               		.loc 1 153 2 view .LVU60
 153:wake-on-shake.c **** 	// TCNT1- When this hits 65,536, an overflow interrupt occurs. By
 211               		.loc 1 153 9 is_stmt 0 view .LVU61
 212 0048 85E0      		ldi r24,lo8(5)
 213 004a 8EBD      		out 0x2e,r24
 159:wake-on-shake.c **** 	// TIMSK- Set TOIE1 to enable Timer1 overflow interrupt
 214               		.loc 1 159 2 is_stmt 1 view .LVU62
 159:wake-on-shake.c **** 	// TIMSK- Set TOIE1 to enable Timer1 overflow interrupt
 215               		.loc 1 159 8 is_stmt 0 view .LVU63
 216 004c 8091 0000 		lds r24,t1Offset
 217 0050 9091 0000 		lds r25,t1Offset+1
 218 0054 9DBD      		out 0x2c+1,r25
 219 0056 8CBD      		out 0x2c,r24
 161:wake-on-shake.c **** 	
 220               		.loc 1 161 2 is_stmt 1 view .LVU64
 161:wake-on-shake.c **** 	
 221               		.loc 1 161 8 is_stmt 0 view .LVU65
 222 0058 80E8      		ldi r24,lo8(-128)
 223 005a 89BF      		out 0x39,r24
 165:wake-on-shake.c **** 		
 224               		.loc 1 165 2 is_stmt 1 view .LVU66
 225 005c 949A      		sbi 0x12,4
 172:wake-on-shake.c **** 	
 226               		.loc 1 172 2 view .LVU67
 227               	/* #APP */
 228               	 ;  172 "wake-on-shake.c" 1
 229 005e 7894      		sei
 230               	 ;  0 "" 2
 177:wake-on-shake.c **** 	while(1)
 231               		.loc 1 177 2 view .LVU68
 232               	/* #NOAPP */
 233 0060 00D0      		rcall printMenu
 234               	.LVL16:
 187:wake-on-shake.c **** 										//   processor up; INT0 is incoming serial
 235               		.loc 1 187 10 is_stmt 0 view .LVU69
 236 0062 C0EC      		ldi r28,lo8(-64)
 237               	.L6:
 178:wake-on-shake.c **** 	{
 238               		.loc 1 178 2 is_stmt 1 view .LVU70
 183:wake-on-shake.c **** 		{
 239               		.loc 1 183 3 view .LVU71
 183:wake-on-shake.c **** 		{
 240               		.loc 1 183 18 is_stmt 0 view .LVU72
 241 0064 8091 0000 		lds r24,sleepyTime
 183:wake-on-shake.c **** 		{
 242               		.loc 1 183 6 view .LVU73
 243 0068 8130      		cpi r24,lo8(1)
 244 006a 01F4      		brne .L5
 185:wake-on-shake.c **** 			ADXLConfig();
 245               		.loc 1 185 4 is_stmt 1 view .LVU74
 246 006c 80E0      		ldi r24,lo8(.LC0)
 247 006e 90E0      		ldi r25,hi8(.LC0)
 248 0070 00D0      		rcall serialWrite
 249               	.LVL17:
 186:wake-on-shake.c **** 			GIMSK = (1<<INT0) |(1<<INT1);// Enable external interrupts to wake the
 250               		.loc 1 186 4 view .LVU75
 251 0072 00D0      		rcall ADXLConfig
 252               	.LVL18:
 187:wake-on-shake.c **** 										//   processor up; INT0 is incoming serial
 253               		.loc 1 187 4 view .LVU76
 187:wake-on-shake.c **** 										//   processor up; INT0 is incoming serial
 254               		.loc 1 187 10 is_stmt 0 view .LVU77
 255 0074 CBBF      		out 0x3b,r28
 190:wake-on-shake.c **** 			sleep_mode();				// Go to sleep until awoken by an interrupt.
 256               		.loc 1 190 4 is_stmt 1 view .LVU78
 257 0076 82B3      		in r24,0x12
 258 0078 12BA      		out 0x12,__zero_reg__
 191:wake-on-shake.c **** 			EEPROMRetrieve();			// Retrieve EEPROM values, mostly to print
 259               		.loc 1 191 4 view .LVU79
 191:wake-on-shake.c **** 			EEPROMRetrieve();			// Retrieve EEPROM values, mostly to print
 260               		.loc 1 191 4 view .LVU80
 191:wake-on-shake.c **** 			EEPROMRetrieve();			// Retrieve EEPROM values, mostly to print
 261               		.loc 1 191 4 view .LVU81
 262 007a 85B7      		in r24,0x35
 263 007c 8062      		ori r24,lo8(32)
 264 007e 85BF      		out 0x35,r24
 191:wake-on-shake.c **** 			EEPROMRetrieve();			// Retrieve EEPROM values, mostly to print
 265               		.loc 1 191 4 view .LVU82
 191:wake-on-shake.c **** 			EEPROMRetrieve();			// Retrieve EEPROM values, mostly to print
 266               		.loc 1 191 4 view .LVU83
 191:wake-on-shake.c **** 			EEPROMRetrieve();			// Retrieve EEPROM values, mostly to print
 267               		.loc 1 191 4 view .LVU84
 268               	/* #APP */
 269               	 ;  191 "wake-on-shake.c" 1
 270 0080 8895      		sleep
 271               		
 272               	 ;  0 "" 2
 191:wake-on-shake.c **** 			EEPROMRetrieve();			// Retrieve EEPROM values, mostly to print
 273               		.loc 1 191 4 view .LVU85
 191:wake-on-shake.c **** 			EEPROMRetrieve();			// Retrieve EEPROM values, mostly to print
 274               		.loc 1 191 4 view .LVU86
 191:wake-on-shake.c **** 			EEPROMRetrieve();			// Retrieve EEPROM values, mostly to print
 275               		.loc 1 191 4 view .LVU87
 276               	/* #NOAPP */
 277 0082 85B7      		in r24,0x35
 278 0084 8F7D      		andi r24,lo8(-33)
 279 0086 85BF      		out 0x35,r24
 191:wake-on-shake.c **** 			EEPROMRetrieve();			// Retrieve EEPROM values, mostly to print
 280               		.loc 1 191 4 view .LVU88
 191:wake-on-shake.c **** 			EEPROMRetrieve();			// Retrieve EEPROM values, mostly to print
 281               		.loc 1 191 4 view .LVU89
 192:wake-on-shake.c **** 										//   them out to the user, if the wake-up
 282               		.loc 1 192 4 view .LVU90
 283 0088 00D0      		rcall EEPROMRetrieve
 284               	.LVL19:
 195:wake-on-shake.c **** 			loadOn();					// Turn the load back on.
 285               		.loc 1 195 4 view .LVU91
 286 008a 00D0      		rcall printMenu
 287               	.LVL20:
 196:wake-on-shake.c **** 		}
 288               		.loc 1 196 4 view .LVU92
 289 008c 949A      		sbi 0x12,4
 290               	.L5:
 201:wake-on-shake.c **** 	}
 291               		.loc 1 201 3 view .LVU93
 201:wake-on-shake.c **** 	}
 292               		.loc 1 201 20 is_stmt 0 view .LVU94
 293 008e 8091 0000 		lds r24,serialRxData
 201:wake-on-shake.c **** 	}
 294               		.loc 1 201 6 view .LVU95
 295 0092 8823      		tst r24
 296 0094 01F0      		breq .L6
 201:wake-on-shake.c **** 	}
 297               		.loc 1 201 26 is_stmt 1 discriminator 1 view .LVU96
 298 0096 00D0      		rcall serialParse
 299               	.LVL21:
 300 0098 00C0      		rjmp .L6
 301               		.cfi_endproc
 302               	.LFE0:
 304               	.global	serialRxData
 305               		.section .bss
 308               	serialRxData:
 309 0000 00        		.zero	1
 310               	.global	sleepyTime
 313               	sleepyTime:
 314 0001 00        		.zero	1
 315               		.comm	t1Offset,2,1
 316               		.text
 317               	.Letext0:
 318               		.file 2 "/usr/local/Cellar/avr-gcc/9.2.0/avr/include/stdint.h"
 319               		.file 3 "eeprom.h"
 320               		.file 4 "serial.h"
 321               		.file 5 "ADXL362.h"
 322               		.file 6 "ui.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 wake-on-shake.c
/var/folders/jy/pkqnkk1s5x97h68j2fkh30vh0000gq/T//ccDhPOrF.s:2      *ABS*:000000000000003d __SP_L__
/var/folders/jy/pkqnkk1s5x97h68j2fkh30vh0000gq/T//ccDhPOrF.s:3      *ABS*:000000000000003f __SREG__
/var/folders/jy/pkqnkk1s5x97h68j2fkh30vh0000gq/T//ccDhPOrF.s:4      *ABS*:0000000000000000 __tmp_reg__
/var/folders/jy/pkqnkk1s5x97h68j2fkh30vh0000gq/T//ccDhPOrF.s:5      *ABS*:0000000000000001 __zero_reg__
/var/folders/jy/pkqnkk1s5x97h68j2fkh30vh0000gq/T//ccDhPOrF.s:11     .text:0000000000000000 EEPROMRetrieve
                            *COM*:0000000000000002 t1Offset
/var/folders/jy/pkqnkk1s5x97h68j2fkh30vh0000gq/T//ccDhPOrF.s:70     .text:0000000000000030 EEPROMConfig
/var/folders/jy/pkqnkk1s5x97h68j2fkh30vh0000gq/T//ccDhPOrF.s:122    .text.startup:0000000000000000 main
/var/folders/jy/pkqnkk1s5x97h68j2fkh30vh0000gq/T//ccDhPOrF.s:313    .bss:0000000000000001 sleepyTime
/var/folders/jy/pkqnkk1s5x97h68j2fkh30vh0000gq/T//ccDhPOrF.s:308    .bss:0000000000000000 serialRxData

UNDEFINED SYMBOLS
EEPROMReadWord
serialWriteInt
EEPROMWriteWord
EEPROMWriteByte
EEPROMReadByte
ADXLConfig
printMenu
serialWrite
serialParse
__do_copy_data
__do_clear_bss
