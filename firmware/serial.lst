   1               		.file	"serial.c"
   2               	__SP_L__ = 0x3d
   3               	__SREG__ = 0x3f
   4               	__tmp_reg__ = 0
   5               	__zero_reg__ = 1
   6               		.text
   7               	.Ltext0:
   8               		.cfi_sections	.debug_frame
   9               	.global	serialWriteChar
  11               	serialWriteChar:
  12               	.LVL0:
  13               	.LFB1:
  14               		.file 1 "serial.c"
   1:serial.c      **** /******************************************************************************
   2:serial.c      **** Created 26 Nov 2012 by Mike Hord at SparkFun Electronics.
   3:serial.c      **** Wake-on-Shake hardware and firmware are released under the Creative Commons 
   4:serial.c      **** Share Alike v3.0 license:
   5:serial.c      **** 	http://creativecommons.org/licenses/by-sa/3.0/
   6:serial.c      **** Feel free to use, distribute, and sell variants of Wake-on-Shake. All we ask 
   7:serial.c      **** is that you include attribution of 'Based on Wake-on-Shake by SparkFun'.
   8:serial.c      **** 
   9:serial.c      **** serial.cpp
  10:serial.c      **** Function implementation for serial write handling.
  11:serial.c      **** ******************************************************************************/
  12:serial.c      **** 
  13:serial.c      **** #include <avr/io.h>
  14:serial.c      **** #include <stdio.h>
  15:serial.c      **** #include "serial.h"
  16:serial.c      **** 
  17:serial.c      **** // Print a single character out to the serial port. Blocks until write has
  18:serial.c      **** //   completed- is that a mistake?
  19:serial.c      **** void serialWriteChar(char data)
  20:serial.c      **** {
  15               		.loc 1 20 1 view -0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
  21:serial.c      **** 	UDR = data;
  21               		.loc 1 21 2 view .LVU1
  22               		.loc 1 21 6 is_stmt 0 view .LVU2
  23 0000 8CB9      		out 0xc,r24
  22:serial.c      **** 	while ((UCSRA & (1<<TXC))==0){}   // Wait for the transmit to finish.
  24               		.loc 1 22 2 is_stmt 1 view .LVU3
  25               	.L2:
  26               		.loc 1 22 32 discriminator 1 view .LVU4
  27               		.loc 1 22 8 discriminator 1 view .LVU5
  28 0002 5E9B      		sbis 0xb,6
  29 0004 00C0      		rjmp .L2
  23:serial.c      **** 	UCSRA |= (1<<TXC);				// Clear the "transmit complete" flag.
  30               		.loc 1 23 2 view .LVU6
  31               		.loc 1 23 8 is_stmt 0 view .LVU7
  32 0006 5E9A      		sbi 0xb,6
  33               	/* epilogue start */
  24:serial.c      **** }
  34               		.loc 1 24 1 view .LVU8
  35 0008 0895      		ret
  36               		.cfi_endproc
  37               	.LFE1:
  39               	.global	serialNewline
  41               	serialNewline:
  42               	.LFB4:
  25:serial.c      **** 
  26:serial.c      **** // serialWrite() takes a pointer to a string and iterates over that string
  27:serial.c      **** //   until it finds the C end-of-string character ('\0'). It's a blocking
  28:serial.c      **** //   operation and does not return until the print operation is completed.
  29:serial.c      **** void serialWrite(char* data)
  30:serial.c      **** {
  31:serial.c      **** 	do
  32:serial.c      **** 	{
  33:serial.c      **** 		serialWriteChar((char)*data);   // Print the first character.
  34:serial.c      **** 		data++;							// Increment the pointer.
  35:serial.c      **** 	} while (*data != '\0');			// Check for the end of the string.
  36:serial.c      **** 	serialNewline();
  37:serial.c      **** }
  38:serial.c      **** 
  39:serial.c      **** // Convert a 16-bit unsigned value into ASCII characters and dump it out
  40:serial.c      **** //   to the serial port.
  41:serial.c      **** void serialWriteInt(unsigned int data)
  42:serial.c      **** {	
  43:serial.c      **** 	uint8_t tenth = 0;
  44:serial.c      **** 	uint8_t thou = 0;
  45:serial.c      **** 	uint8_t huns = 0;
  46:serial.c      **** 	uint8_t tens = 0;
  47:serial.c      **** 	uint8_t ones = 0;
  48:serial.c      **** 	// This is an awkward shifting/dividing method of isolating the individual
  49:serial.c      **** 	//   digits of the number. I'm sure there's a better way, but done is.
  50:serial.c      **** 	tenth = (data/10000);
  51:serial.c      **** 	data -= tenth*10000;
  52:serial.c      **** 	thou = (uint8_t)(data/1000);
  53:serial.c      **** 	data -= (uint16_t)thou*1000;
  54:serial.c      **** 	huns = (uint8_t)(data/100);
  55:serial.c      **** 	data -= (uint16_t)huns*100;
  56:serial.c      **** 	tens = (uint8_t)(data/10);
  57:serial.c      **** 	ones = (uint8_t)(data%10);
  58:serial.c      **** 	
  59:serial.c      **** 	tenth += 48;
  60:serial.c      **** 	thou += 48;
  61:serial.c      **** 	huns += 48;
  62:serial.c      **** 	tens += 48;
  63:serial.c      **** 	ones += 48;
  64:serial.c      **** 	// Write the individual digits out, followed by a line feed and CR.
  65:serial.c      **** 	serialWriteChar(tenth);
  66:serial.c      **** 	serialWriteChar(thou);
  67:serial.c      **** 	serialWriteChar(huns);
  68:serial.c      **** 	serialWriteChar(tens);
  69:serial.c      **** 	serialWriteChar(ones);
  70:serial.c      **** 	serialNewline();
  71:serial.c      **** }
  72:serial.c      **** 
  73:serial.c      **** void serialNewline(void)
  74:serial.c      **** {
  43               		.loc 1 74 1 is_stmt 1 view -0
  44               		.cfi_startproc
  45               	/* prologue: function */
  46               	/* frame size = 0 */
  47               	/* stack size = 0 */
  48               	.L__stack_usage = 0
  75:serial.c      **** 	serialWriteChar((char)'\n');
  49               		.loc 1 75 2 view .LVU10
  50 000a 8AE0      		ldi r24,lo8(10)
  51 000c 00D0      		rcall serialWriteChar
  52               	.LVL1:
  76:serial.c      **** 	serialWriteChar((char)'\r');
  53               		.loc 1 76 2 view .LVU11
  54 000e 8DE0      		ldi r24,lo8(13)
  55 0010 00C0      		rjmp serialWriteChar
  56               	.LVL2:
  57               		.cfi_endproc
  58               	.LFE4:
  60               	.global	serialWrite
  62               	serialWrite:
  63               	.LVL3:
  64               	.LFB2:
  30:serial.c      **** 	do
  65               		.loc 1 30 1 view -0
  66               		.cfi_startproc
  30:serial.c      **** 	do
  67               		.loc 1 30 1 is_stmt 0 view .LVU13
  68 0012 CF93      		push r28
  69               	.LCFI0:
  70               		.cfi_def_cfa_offset 3
  71               		.cfi_offset 28, -2
  72 0014 DF93      		push r29
  73               	.LCFI1:
  74               		.cfi_def_cfa_offset 4
  75               		.cfi_offset 29, -3
  76               	/* prologue: function */
  77               	/* frame size = 0 */
  78               	/* stack size = 2 */
  79               	.L__stack_usage = 2
  80 0016 EC01      		movw r28,r24
  81               	.LVL4:
  82               	.L7:
  31:serial.c      **** 	{
  83               		.loc 1 31 2 is_stmt 1 discriminator 1 view .LVU14
  33:serial.c      **** 		data++;							// Increment the pointer.
  84               		.loc 1 33 3 discriminator 1 view .LVU15
  85 0018 8991      		ld r24,Y+
  86               	.LVL5:
  33:serial.c      **** 		data++;							// Increment the pointer.
  87               		.loc 1 33 3 is_stmt 0 discriminator 1 view .LVU16
  88 001a 00D0      		rcall serialWriteChar
  89               	.LVL6:
  34:serial.c      **** 	} while (*data != '\0');			// Check for the end of the string.
  90               		.loc 1 34 3 is_stmt 1 discriminator 1 view .LVU17
  35:serial.c      **** 	serialNewline();
  91               		.loc 1 35 10 discriminator 1 view .LVU18
  35:serial.c      **** 	serialNewline();
  92               		.loc 1 35 2 is_stmt 0 discriminator 1 view .LVU19
  93 001c 8881      		ld r24,Y
  94 001e 8111      		cpse r24,__zero_reg__
  95 0020 00C0      		rjmp .L7
  36:serial.c      **** }
  96               		.loc 1 36 2 is_stmt 1 view .LVU20
  97               	/* epilogue start */
  37:serial.c      **** 
  98               		.loc 1 37 1 is_stmt 0 view .LVU21
  99 0022 DF91      		pop r29
 100 0024 CF91      		pop r28
 101               	.LVL7:
  36:serial.c      **** }
 102               		.loc 1 36 2 view .LVU22
 103 0026 00C0      		rjmp serialNewline
 104               	.LVL8:
 105               		.cfi_endproc
 106               	.LFE2:
 108               	.global	serialWriteInt
 110               	serialWriteInt:
 111               	.LVL9:
 112               	.LFB3:
  42:serial.c      **** 	uint8_t tenth = 0;
 113               		.loc 1 42 1 is_stmt 1 view -0
 114               		.cfi_startproc
  42:serial.c      **** 	uint8_t tenth = 0;
 115               		.loc 1 42 1 is_stmt 0 view .LVU24
 116 0028 0F93      		push r16
 117               	.LCFI2:
 118               		.cfi_def_cfa_offset 3
 119               		.cfi_offset 16, -2
 120 002a 1F93      		push r17
 121               	.LCFI3:
 122               		.cfi_def_cfa_offset 4
 123               		.cfi_offset 17, -3
 124 002c CF93      		push r28
 125               	.LCFI4:
 126               		.cfi_def_cfa_offset 5
 127               		.cfi_offset 28, -4
 128 002e DF93      		push r29
 129               	.LCFI5:
 130               		.cfi_def_cfa_offset 6
 131               		.cfi_offset 29, -5
 132               	/* prologue: function */
 133               	/* frame size = 0 */
 134               	/* stack size = 4 */
 135               	.L__stack_usage = 4
 136 0030 9C01      		movw r18,r24
  43:serial.c      **** 	uint8_t thou = 0;
 137               		.loc 1 43 2 is_stmt 1 view .LVU25
 138               	.LVL10:
  44:serial.c      **** 	uint8_t huns = 0;
 139               		.loc 1 44 2 view .LVU26
  45:serial.c      **** 	uint8_t tens = 0;
 140               		.loc 1 45 2 view .LVU27
  46:serial.c      **** 	uint8_t ones = 0;
 141               		.loc 1 46 2 view .LVU28
  47:serial.c      **** 	// This is an awkward shifting/dividing method of isolating the individual
 142               		.loc 1 47 2 view .LVU29
  50:serial.c      **** 	data -= tenth*10000;
 143               		.loc 1 50 2 view .LVU30
  50:serial.c      **** 	data -= tenth*10000;
 144               		.loc 1 50 15 is_stmt 0 view .LVU31
 145 0032 60E1      		ldi r22,lo8(16)
 146 0034 77E2      		ldi r23,lo8(39)
 147 0036 00D0      		rcall __udivmodhi4
 148               	.LVL11:
  50:serial.c      **** 	data -= tenth*10000;
 149               		.loc 1 50 15 view .LVU32
 150 0038 462F      		mov r20,r22
 151 003a 972F      		mov r25,r23
 152               	.LVL12:
  51:serial.c      **** 	thou = (uint8_t)(data/1000);
 153               		.loc 1 51 2 is_stmt 1 view .LVU33
  51:serial.c      **** 	thou = (uint8_t)(data/1000);
 154               		.loc 1 51 15 is_stmt 0 view .LVU34
 155 003c 862F      		mov r24,r22
 156 003e 60E1      		ldi r22,lo8(16)
 157 0040 77E2      		ldi r23,lo8(39)
 158 0042 00D0      		rcall __mulhi3
  51:serial.c      **** 	thou = (uint8_t)(data/1000);
 159               		.loc 1 51 7 view .LVU35
 160 0044 B901      		movw r22,r18
 161 0046 681B      		sub r22,r24
 162 0048 790B      		sbc r23,r25
 163 004a CB01      		movw r24,r22
 164               	.LVL13:
  52:serial.c      **** 	data -= (uint16_t)thou*1000;
 165               		.loc 1 52 2 is_stmt 1 view .LVU36
  52:serial.c      **** 	data -= (uint16_t)thou*1000;
 166               		.loc 1 52 23 is_stmt 0 view .LVU37
 167 004c 68EE      		ldi r22,lo8(-24)
 168 004e 73E0      		ldi r23,lo8(3)
 169               	.LVL14:
  52:serial.c      **** 	data -= (uint16_t)thou*1000;
 170               		.loc 1 52 23 view .LVU38
 171 0050 00D0      		rcall __udivmodhi4
 172               	.LVL15:
  52:serial.c      **** 	data -= (uint16_t)thou*1000;
 173               		.loc 1 52 23 view .LVU39
 174 0052 062F      		mov r16,r22
 175               	.LVL16:
  53:serial.c      **** 	huns = (uint8_t)(data/100);
 176               		.loc 1 53 2 is_stmt 1 view .LVU40
  54:serial.c      **** 	data -= (uint16_t)huns*100;
 177               		.loc 1 54 2 view .LVU41
  54:serial.c      **** 	data -= (uint16_t)huns*100;
 178               		.loc 1 54 23 is_stmt 0 view .LVU42
 179 0054 64E6      		ldi r22,lo8(100)
 180 0056 70E0      		ldi r23,0
 181 0058 00D0      		rcall __udivmodhi4
 182               	.LVL17:
  54:serial.c      **** 	data -= (uint16_t)huns*100;
 183               		.loc 1 54 23 view .LVU43
 184 005a 162F      		mov r17,r22
 185               	.LVL18:
  55:serial.c      **** 	tens = (uint8_t)(data/10);
 186               		.loc 1 55 2 is_stmt 1 view .LVU44
  56:serial.c      **** 	ones = (uint8_t)(data%10);
 187               		.loc 1 56 2 view .LVU45
  56:serial.c      **** 	ones = (uint8_t)(data%10);
 188               		.loc 1 56 23 is_stmt 0 view .LVU46
 189 005c 6AE0      		ldi r22,lo8(10)
 190 005e 70E0      		ldi r23,0
 191 0060 00D0      		rcall __udivmodhi4
 192               	.LVL19:
  56:serial.c      **** 	ones = (uint8_t)(data%10);
 193               		.loc 1 56 23 view .LVU47
 194 0062 D62F      		mov r29,r22
 195 0064 C82F      		mov r28,r24
 196               	.LVL20:
  57:serial.c      **** 	
 197               		.loc 1 57 2 is_stmt 1 view .LVU48
  59:serial.c      **** 	thou += 48;
 198               		.loc 1 59 2 view .LVU49
  60:serial.c      **** 	huns += 48;
 199               		.loc 1 60 2 view .LVU50
  61:serial.c      **** 	tens += 48;
 200               		.loc 1 61 2 view .LVU51
  62:serial.c      **** 	ones += 48;
 201               		.loc 1 62 2 view .LVU52
  63:serial.c      **** 	// Write the individual digits out, followed by a line feed and CR.
 202               		.loc 1 63 2 view .LVU53
  65:serial.c      **** 	serialWriteChar(thou);
 203               		.loc 1 65 2 view .LVU54
 204 0066 80E3      		ldi r24,lo8(48)
 205               	.LVL21:
  65:serial.c      **** 	serialWriteChar(thou);
 206               		.loc 1 65 2 is_stmt 0 view .LVU55
 207 0068 840F      		add r24,r20
 208               	.LVL22:
  65:serial.c      **** 	serialWriteChar(thou);
 209               		.loc 1 65 2 view .LVU56
 210 006a 00D0      		rcall serialWriteChar
 211               	.LVL23:
  66:serial.c      **** 	serialWriteChar(huns);
 212               		.loc 1 66 2 is_stmt 1 view .LVU57
 213 006c 80E3      		ldi r24,lo8(48)
 214 006e 800F      		add r24,r16
 215               	.LVL24:
  66:serial.c      **** 	serialWriteChar(huns);
 216               		.loc 1 66 2 is_stmt 0 view .LVU58
 217 0070 00D0      		rcall serialWriteChar
 218               	.LVL25:
  67:serial.c      **** 	serialWriteChar(tens);
 219               		.loc 1 67 2 is_stmt 1 view .LVU59
 220 0072 80E3      		ldi r24,lo8(48)
 221 0074 810F      		add r24,r17
 222               	.LVL26:
  67:serial.c      **** 	serialWriteChar(tens);
 223               		.loc 1 67 2 is_stmt 0 view .LVU60
 224 0076 00D0      		rcall serialWriteChar
 225               	.LVL27:
  68:serial.c      **** 	serialWriteChar(ones);
 226               		.loc 1 68 2 is_stmt 1 view .LVU61
 227 0078 80E3      		ldi r24,lo8(48)
 228 007a 8D0F      		add r24,r29
 229               	.LVL28:
  68:serial.c      **** 	serialWriteChar(ones);
 230               		.loc 1 68 2 is_stmt 0 view .LVU62
 231 007c 00D0      		rcall serialWriteChar
 232               	.LVL29:
  69:serial.c      **** 	serialNewline();
 233               		.loc 1 69 2 is_stmt 1 view .LVU63
 234 007e 80E3      		ldi r24,lo8(48)
 235 0080 8C0F      		add r24,r28
 236               	.LVL30:
  69:serial.c      **** 	serialNewline();
 237               		.loc 1 69 2 is_stmt 0 view .LVU64
 238 0082 00D0      		rcall serialWriteChar
 239               	.LVL31:
  70:serial.c      **** }
 240               		.loc 1 70 2 is_stmt 1 view .LVU65
 241               	/* epilogue start */
  71:serial.c      **** 
 242               		.loc 1 71 1 is_stmt 0 view .LVU66
 243 0084 DF91      		pop r29
 244               	.LVL32:
  71:serial.c      **** 
 245               		.loc 1 71 1 view .LVU67
 246 0086 CF91      		pop r28
 247               	.LVL33:
  71:serial.c      **** 
 248               		.loc 1 71 1 view .LVU68
 249 0088 1F91      		pop r17
 250               	.LVL34:
  71:serial.c      **** 
 251               		.loc 1 71 1 view .LVU69
 252 008a 0F91      		pop r16
 253               	.LVL35:
  70:serial.c      **** }
 254               		.loc 1 70 2 view .LVU70
 255 008c 00C0      		rjmp serialNewline
 256               	.LVL36:
 257               		.cfi_endproc
 258               	.LFE3:
 260               	.Letext0:
 261               		.file 2 "/usr/local/Cellar/avr-gcc/9.2.0/avr/include/stdint.h"
 262               		.file 3 "/usr/local/Cellar/avr-gcc/9.2.0/avr/include/stdio.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 serial.c
/var/folders/jy/pkqnkk1s5x97h68j2fkh30vh0000gq/T//ccO4bLUY.s:2      *ABS*:000000000000003d __SP_L__
/var/folders/jy/pkqnkk1s5x97h68j2fkh30vh0000gq/T//ccO4bLUY.s:3      *ABS*:000000000000003f __SREG__
/var/folders/jy/pkqnkk1s5x97h68j2fkh30vh0000gq/T//ccO4bLUY.s:4      *ABS*:0000000000000000 __tmp_reg__
/var/folders/jy/pkqnkk1s5x97h68j2fkh30vh0000gq/T//ccO4bLUY.s:5      *ABS*:0000000000000001 __zero_reg__
/var/folders/jy/pkqnkk1s5x97h68j2fkh30vh0000gq/T//ccO4bLUY.s:11     .text:0000000000000000 serialWriteChar
/var/folders/jy/pkqnkk1s5x97h68j2fkh30vh0000gq/T//ccO4bLUY.s:41     .text:000000000000000a serialNewline
/var/folders/jy/pkqnkk1s5x97h68j2fkh30vh0000gq/T//ccO4bLUY.s:62     .text:0000000000000012 serialWrite
/var/folders/jy/pkqnkk1s5x97h68j2fkh30vh0000gq/T//ccO4bLUY.s:110    .text:0000000000000028 serialWriteInt

UNDEFINED SYMBOLS
__udivmodhi4
__mulhi3
